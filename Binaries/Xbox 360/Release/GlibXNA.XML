<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GlibXNA</name>
    </assembly>
    <members>
        <member name="T:Glib.XNA.SpriteLib.AngleType">
            <summary>
            An enum representing a type of an angle measurement.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.AngleType.Radians">
            <summary>
            An angle in radians.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.AngleType.Degrees">
            <summary>
            An angle in degrees.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.AngleType.Gradians">
            <summary>
            An angle in gradians.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteRotation">
            <summary>
            A structure representing the rotation of a sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.Equals(System.Object)">
            <summary>
            Determines whether this <see cref="T:Glib.XNA.SpriteLib.SpriteRotation"/> equals the specified object.
            </summary>
            <param name="obj">The object to determine equivalence to.</param>
            <returns>Whether or not the specified object is equal.</returns>
            <remarks>
            For all logical purposes, this method only compares rotation values.
            This method will attempt to cast the specified object (note: this includes user conversions) to a SpriteRotation before comparing equality.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.GetHashCode">
            <summary>
            Calculate a hash of this <see cref="T:Glib.XNA.SpriteLib.SpriteRotation"/>.
            </summary>
            <returns>A hash code of this SpriteRotation.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_Inequality(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Returns a value indicating whether two SpriteRotations are not equal.
            </summary>
            <param name="a">The first SpriteRotation to compare.</param>
            <param name="b">The second SpriteRotation to compare.</param>
            <returns>A value indicating whether the two SpriteRotations are not equal.</returns>
            <remarks>
            Doesn't compare events.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_Equality(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Returns a value indicating whether two SpriteRotations are equal.
            </summary>
            <param name="a">The first SpriteRotation to compare.</param>
            <param name="b">The second SpriteRotation to compare.</param>
            <returns>A value indicating whether the two SpriteRotations are equal.</returns>
            <remarks>
            Doesn't compare events.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.FromRadians(System.Single)">
            <summary>
            Returns a SpriteRotation representing the specified value in radians.
            </summary>
            <param name="radians">The number of radians to represent in the new SpriteRotation.</param>
            <returns>A new SpriteRotation representing the specified value in radians.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.FromVector(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a SpriteRotation representing the specified vector.
            </summary>
            <param name="vector">The vector to convert to a <see cref="T:Glib.XNA.SpriteLib.SpriteRotation"/>.</param>
            <returns>A new SpriteRotation representing the specified vector.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.FromVector(Microsoft.Xna.Framework.Vector2,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Returns a SpriteRotation representing the specified vector.
            </summary>
            <param name="vector">The vector to convert to a <see cref="T:Glib.XNA.SpriteLib.SpriteRotation"/>.</param>
            <param name="offsetAngle">The initial angle offset.</param>
            <returns>A new SpriteRotation representing the specified vector.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.FromDegrees(System.Single)">
            <summary>
            Returns a SpriteRotation representing the specified value in degrees.
            </summary>
            <param name="degrees">The number of degrees to represent in the new SpriteRotation.</param>
            <returns>A new SpriteRotation representing the specified value in degrees.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_Addition(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Add two SpriteRotations.
            </summary>
            <param name="x">The first SpriteRotation to add.</param>
            <param name="y">The second SpriteRotation to add.</param>
            <returns>A SpriteRotation representing the combined rotation values of x any y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_LessThan(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Compare two SpriteRotations.
            </summary>
            <param name="x">The first SpriteRotation to compare.</param>
            <param name="y">The second SpriteRotation to compare.</param>
            <returns>Whether or not x is less than y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_LessThanOrEqual(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Compare two SpriteRotations.
            </summary>
            <param name="x">The first SpriteRotation to compare.</param>
            <param name="y">The second SpriteRotation to compare.</param>
            <returns>Whether or not x is less than or equal to y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_GreaterThanOrEqual(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Compare two SpriteRotations.
            </summary>
            <param name="x">The first SpriteRotation to compare.</param>
            <param name="y">The second SpriteRotation to compare.</param>
            <returns>Whether or not x is greater than or equal to y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_GreaterThan(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Compare two SpriteRotations.
            </summary>
            <param name="x">The first SpriteRotation to compare.</param>
            <param name="y">The second SpriteRotation to compare.</param>
            <returns>Whether or not x is greater than y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_Subtraction(Glib.XNA.SpriteLib.SpriteRotation,System.Single)">
            <summary>
            Subtract a SpriteRotation and a float representing a value in DEGREES.
            </summary>
            <param name="x">The SpriteRotation to subtract from.</param>
            <param name="y">The number of degrees to subtract from the SpriteRotation.</param>
            <returns>A SpriteRotation representing x.Degrees - y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_Addition(Glib.XNA.SpriteLib.SpriteRotation,System.Single)">
            <summary>
            Add a SpriteRotation and a float representing a value in DEGREES.
            </summary>
            <param name="x">The SpriteRotation to add to.</param>
            <param name="y">The number of degrees to add to the SpriteRotation.</param>
            <returns>A SpriteRotation representing the combined rotation values of x any y.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.op_Subtraction(Glib.XNA.SpriteLib.SpriteRotation,Glib.XNA.SpriteLib.SpriteRotation)">
            <summary>
            Subtract two SpriteRotations.
            </summary>
            <param name="x">The base SpriteRotation.</param>
            <param name="y">The SpriteRotation to subtract from the base.</param>
            <returns>A SpriteRotation representing x.Degrees - y.Degrees.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.#ctor(System.Single)">
            <summary>
            Initialize a new SpriteRotation with the specified value of degrees.
            </summary>
            <param name="degrees">The number of degrees to initialize this SpriteRotation to</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteRotation.#ctor(System.Single,Glib.XNA.SpriteLib.AngleType)">
            <summary>
            Initialize a new SpriteRotation with the specified value using the specified unit.
            </summary>
            <param name="value">The value to initialize this SpriteRotation to.</param>
            <param name="measurementType">The type of angle that value represents.</param>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteRotation.Zero">
            <summary>
            Gets a SpriteRotation representing zero degrees.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteRotation.Degrees">
            <summary>
            Gets the rotation of the sprite in degrees.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteRotation.Vector">
            <summary>
            Gets a vector representing this angle.
            </summary>
            <remarks>
            All logic of this is handled by XnaExtensions.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteRotation.Gradians">
            <summary>
            Gets the rotation of the Sprite in gradians (AKA gons, grads, or grades).
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteRotation.Radians">
            <summary>
            Gets the rotation of the sprite in radians.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.ScreenRegion">
            <summary>
            Represents a region on screen which can call mouse events.
            </summary>
        </member>
        <member name="T:Glib.XNA.IPositionable">
            <summary>
            A basic component which has a position.
            </summary>
        </member>
        <member name="P:Glib.XNA.IPositionable.Position">
            <summary>
            Gets or sets the position of the IPositionable.
            </summary>
        </member>
        <member name="T:Glib.XNA.ISizable">
            <summary>
            Represents a sizable object.
            </summary>
        </member>
        <member name="P:Glib.XNA.ISizable.Width">
            <summary>
            The width of the object.
            </summary>
        </member>
        <member name="P:Glib.XNA.ISizable.Height">
            <summary>
            The height of the object.
            </summary>
        </member>
        <member name="T:Glib.XNA.ISizedScreenObject">
            <summary>
            Represents a sizable, positionable, screen object.
            </summary>
        </member>
        <member name="M:Glib.XNA.InputLib.ScreenRegion.Intersects(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines whether the specified point is inside this <see cref="T:Glib.XNA.InputLib.ScreenRegion"/>.
            </summary>
            <param name="point">The point to determine intersection.</param>
            <returns>A value indicating whether the point intersects with this ScreenRegion.</returns>
        </member>
        <member name="M:Glib.XNA.InputLib.ScreenRegion.op_Explicit(Glib.XNA.InputLib.ScreenRegion)~Microsoft.Xna.Framework.Rectangle">
            <summary>
            Convert the specified ScreenRegion to a rectangle.
            </summary>
            <param name="a">The ScreenRegion to convert.</param>
            <returns>The rectangle representing the ScreenRegion.</returns>
            <remarks>
            The rectange is rounded, since the ScreenRegion supports floating point numbers.
            </remarks>
        </member>
        <member name="M:Glib.XNA.InputLib.ScreenRegion.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Create a new ScreenRegion with the specified bounds and position.
            </summary>
            <param name="bounds">The bounds and position of the ScreenRegion.</param>
        </member>
        <member name="M:Glib.XNA.InputLib.ScreenRegion.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Create a new ScreenRegion with the specified size and position.
            </summary>
            <param name="pos">The position of the ScreenRegion.</param>
            <param name="size">The size of the ScreenRegion.</param>
        </member>
        <member name="M:Glib.XNA.InputLib.ScreenRegion.Update">
            <summary>
            Update this ScreenRegion, calling mouse events.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.ScreenRegion.X">
            <summary>
            Gets or sets the X coordinate of this <see cref="T:Glib.XNA.InputLib.ScreenRegion"/>.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.ScreenRegion.Y">
            <summary>
            Gets or sets the Y coordinate of this <see cref="T:Glib.XNA.InputLib.ScreenRegion"/>.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.ScreenRegion.Size">
            <summary>
            Gets or sets the size of the ScreenRegion.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.ScreenRegion.Position">
            <summary>
            Gets or sets the position of the ScreenRegion.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.ScreenRegion.Width">
            <summary>
            Gets or sets the width of the ScreenRegion.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.ScreenRegion.Height">
            <summary>
            Gets or sets the height of the ScreenRegion.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.BackgroundSprite">
            <summary>
            Represents a background Sprite which tiles a background.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.Sprite">
            <summary>
            An implementation of ISprite with many features, such as updated, drawn, and moved events, an easily accessible position, configurable position changes per update, center-point support, and scale support.
            </summary>
        </member>
        <member name="T:Glib.XNA.ISprite">
            <summary>
            A sprite, supporting updates and draws.
            </summary>
        </member>
        <member name="T:Glib.XNA.IDrawableComponent">
            <summary>
            A basic drawable component.
            </summary>
        </member>
        <member name="M:Glib.XNA.IDrawableComponent.Draw">
            <summary>
            Draw the IDrawableComponent.
            </summary>
        </member>
        <member name="M:Glib.XNA.ISprite.Draw">
            <summary>
            Draw the ISprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.ISprite.Update">
            <summary>
            Update the ISprite as applicable (do logic here).
            </summary>
        </member>
        <member name="T:Glib.XNA.ISpriteBatchManagerSprite">
            <summary>
            A basic sprite, supporting updates and draws with the option of toggling SpriteBatch management.
            </summary>
        </member>
        <member name="M:Glib.XNA.ISpriteBatchManagerSprite.Draw">
            <summary>
            Draw the ISpriteBatchManagerSprite, beginning and ending the SpriteBatch automatically.
            </summary>
        </member>
        <member name="M:Glib.XNA.ISpriteBatchManagerSprite.DrawNonAuto">
            <summary>
            Draw the ISpriteBatchManagerSprite, not beginning and ending the SpriteBatch automatically.
            </summary>
        </member>
        <member name="M:Glib.XNA.ISpriteBatchManagerSprite.Update">
            <summary>
            Update the ISpriteBatchManagerSprite as applicable (do logic here).
            </summary>
        </member>
        <member name="T:Glib.XNA.ITexturable">
            <summary>
            A basic component which has a texture.
            </summary>
        </member>
        <member name="P:Glib.XNA.ITexturable.Texture">
            <summary>
            Gets or sets the texture of the ITexturable.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Sprite.SpriteBatch">
            <summary>
            The SpriteBatch used for drawing the sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.FireRotationChangeEvent">
            <summary>
            Fire the <see cref="E:Glib.XNA.SpriteLib.Sprite.RotationChanged"/> event.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.MoveSprite(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Move this Sprite to the specified position, calling the Moved event, but not Move.
            </summary>
            <param name="newPos">The new position of the Sprite.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.IsMoveEventCanceled(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calls the Move event and returns whether or not it was canceled.
            </summary>
            <remarks>
            Calls an event; call only when neccesary.
            </remarks>
            <param name="newPos">The position to call the move event with.</param>
            <returns>Whether or not the called move event was cancelled.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Create a new Sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Create a new Sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Draw">
            <summary>
            Draws the sprite.
            Automatically begins the SpriteBatch before you draw the sprite and ends the SpriteBatch after you draw the sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.DrawNonAuto">
            <summary>
            Draws the sprite.
            Requires you to begin the SpriteBatch before you draw the sprite, and to end the SpriteBatch after you draw the sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.CallDrawn">
            <summary>
            Call the drawn event after drawing of the Sprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Intersects(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks whether the given point intersects with the sprite.
            </summary>
            <param name="pos">The position to check.</param>
            <returns>Whether or not the specified position intersects with this Sprite.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Intersects(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Checks whether the given rectangle intersects with this sprite.
            </summary>
            <param name="r">The rectangle to check intersection against</param>
            <returns>Whether or not the specified rectangle intersects with this Sprite.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Intersects(Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Checks whether the given sprite intersects with this sprite.
            </summary>
            <param name="s">The sprite to check intersection against.</param>
            <returns>Whether or not the rectangle of the specified Sprite intersects with this Sprite.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.EdgesPast">
            <summary>
            Determines the edges which this sprite has points past, if any.
            </summary>
            <returns>An array of directions representing the edges this sprite is past. Empty if none.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Update">
            <summary>
            Logically update this sprite. This can also be done in the Updated event.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Sprite.Dispose">
            <summary>
            Disposes of this <see cref="T:Glib.XNA.SpriteLib.Sprite"/>.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Speed">
            <summary>
            Gets or sets the velocity of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Visible">
            <summary>
            Gets or sets a boolean indicating whether the Sprite is visible.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Effect">
            <summary>
            The effect to apply to the Sprite when drawn.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.OnlyDrawRegion">
            <summary>
            A boolean representing whether or not to only draw a selected region of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.DrawRegion">
            <summary>
            Gets or sets the selected region of the Sprite to draw. Set to null to draw the entire Sprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.Sprite.Moved">
            <summary>
            An EventHandler called after the successful movement of this Sprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.Sprite.Updated">
            <summary>
            An event called after every update of this sprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.Sprite.Drawn">
            <summary>
            An event called after every draw of this sprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.Sprite.Move">
            <summary>
            A cancellable event called before every change of this sprite's position.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Scale">
            <summary>
            Gets or sets the scale at which to render the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Center">
            <summary>
            Gets the scale-sensitive center of the sprite.
            Setting this property will break with OriginType as Center or Custom.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.X">
            <summary>
            The current X coordinate of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Y">
            <summary>
            The current Y coordinate of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Width">
            <summary>
            A scale-sensitive width. Use Texture.Width to not account for scale.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Height">
            <summary>
            A scale-sensitive height. Use Texture.Height to not account for scale.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Rotation">
            <summary>
            Gets or sets the current rotation of the sprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.Sprite.RotationChanged">
            <summary>
            An event fired after the rotation of this <see cref="T:Glib.XNA.SpriteLib.Sprite"/> changes.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Texture">
            <summary>
            The texture of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Position">
            <summary>
            The current position of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.TintColor">
            <summary>
            Gets or sets the color to tint the sprite. Defaults to white.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Rectangle">
            <summary>
            Gets an approximate Rectangle representing the area covered by this Sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.OriginType">
            <summary>
            Gets or sets an enum representing the type of the origin of this Sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.Origin">
            <summary>
            Gets or sets the origin of the Sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.TopLeft">
            <summary>
            Gets the top left corner of this Sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.UseCenterAsOrigin">
            <summary>
            Gets or sets whether or not to use the center of the Sprite as the origin.
            </summary>
            <remarks>
            When Origin is set, it will only affect this value if set precisely to the center of the Sprite (no scale accounting).
            If this is set to false, the Origin will not be changed.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Sprite.LayerDepth">
            <summary>
            Gets or sets the layer depth at which to render the <see cref="T:Glib.XNA.SpriteLib.Sprite"/>.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.BackgroundSprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32)">
            <summary>
            Create a new BackgroundSprite.
            </summary>
            <param name="texture">The sprite texture.</param>
            <param name="sb">The SpriteBatch.</param>
            <param name="height">The height of the background matrix.</param>
            <param name="width">The width of the background matrix.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.BackgroundSprite.DrawNonAuto">
            <summary>
            Draw this background sprite without opening or closing the SpriteBatch.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.BackgroundSprite.CenterViewport">
            <summary>
            Sets the viewport to the middle of the BackgroundSprite Texture.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.BackgroundSprite.HorizontalCount">
            <summary>
            Gets the count of background image tiles horizontally.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.BackgroundSprite.VerticalCount">
            <summary>
            Gets the count of background image tiles vertiacally.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.BackgroundSprite.TotalWidth">
            <summary>
            Gets the total width of the background.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.BackgroundSprite.TotalHeight">
            <summary>
            Gets the total height of the background.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.BackgroundSprite.ShowStitches">
            <summary>
            Gets or sets a boolean indicating whether or not to show stitches.
            </summary>
        </member>
        <member name="T:Glib.XNA.NetworkLib.NetworkWatcherComponent">
            <summary>
            A game component for watching the network for information and sending information.
            </summary>
            <remarks>
            Supports sending various types entailed in the WriteData overloads.
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Create a new <see cref="T:Glib.XNA.NetworkLib.NetworkWatcherComponent"/>.
            </summary>
            <param name="game">The game to add this component to.</param>
            <remarks>
            Before this <see cref="T:Glib.XNA.NetworkLib.NetworkWatcherComponent"/> is active, the <see cref="P:Glib.XNA.NetworkLib.NetworkWatcherComponent.Session"/> property must be assigned.
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.Initialize">
            <summary>
            Allows the game component to perform any initialization it needs to before starting
            to run.  This is where it can query for any required services and load content.
            </summary>
        </member>
        <member name="F:Glib.XNA.NetworkLib.NetworkWatcherComponent._dataReaders">
            <summary>
            A dictionary holding <see cref="T:Microsoft.Xna.Framework.Net.PacketReader"/>s for every <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/>.
            </summary>
        </member>
        <member name="F:Glib.XNA.NetworkLib.NetworkWatcherComponent._dataWriters">
            <summary>
            A dictionary holding <see cref="T:Microsoft.Xna.Framework.Net.PacketWriter"/>s for every <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/>.
            </summary>
            <remarks>
            These <see cref="T:Microsoft.Xna.Framework.Net.PacketWriter"/>s are written to in the following format:
            - String name
            - String type
            - Type value
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.WriteData(System.String,System.Int32,System.String)">
            <summary>
            Writes data to the specified <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/>'s <see cref="T:Microsoft.Xna.Framework.Net.PacketWriter"/> to be sent across the network.
            </summary>
            <param name="propertyName">The name of the property to send.</param>
            <param name="senderIndex">The index of the sender in the <see cref="P:Glib.XNA.NetworkLib.NetworkWatcherComponent.Session"/>'s LocalGamers collection.</param>
            <param name="data">The data to send.</param>
            <remarks>
            Sends 3 values - three strings (one is the data itself).
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.WriteData(System.String,System.Int32,System.Double)">
            <summary>
            Writes data to the specified <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/>'s <see cref="T:Microsoft.Xna.Framework.Net.PacketWriter"/> to be sent across the network.
            </summary>
            <param name="propertyName">The name of the property to send.</param>
            <param name="senderIndex">The index of the sender in the <see cref="P:Glib.XNA.NetworkLib.NetworkWatcherComponent.Session"/>'s LocalGamers collection.</param>
            <param name="data">The data to send.</param>
            <remarks>
            Sends 3 values - two strings and a double (the data).
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.WriteData(System.String,System.Int32,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Writes data to the specified <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/>'s <see cref="T:Microsoft.Xna.Framework.Net.PacketWriter"/> to be sent across the network.
            </summary>
            <param name="propertyName">The name of the property to send.</param>
            <param name="senderIndex">The index of the sender in the <see cref="P:Glib.XNA.NetworkLib.NetworkWatcherComponent.Session"/>'s LocalGamers collection.</param>
            <param name="data">The data to send.</param>
            <remarks>
            Sends 3 values - two strings and a Vector4 (the data).
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.WriteData(System.String,System.Int32,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Writes data to the specified <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/>'s <see cref="T:Microsoft.Xna.Framework.Net.PacketWriter"/> to be sent across the network.
            </summary>
            <param name="propertyName">The name of the property to send.</param>
            <param name="senderIndex">The index of the sender in the <see cref="P:Glib.XNA.NetworkLib.NetworkWatcherComponent.Session"/>'s LocalGamers collection.</param>
            <param name="data">The data to send.</param>
            <remarks>
            Sends 3 values - two strings and a Matrix (the data).
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.WriteData(System.String,System.Int32,System.Int32)">
            <summary>
            Writes data to the specified <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/>'s <see cref="T:Microsoft.Xna.Framework.Net.PacketWriter"/> to be sent across the network.
            </summary>
            <param name="propertyName">The name of the property to send.</param>
            <param name="senderIndex">The index of the sender in the <see cref="P:Glib.XNA.NetworkLib.NetworkWatcherComponent.Session"/>'s LocalGamers collection.</param>
            <param name="data">The data to send.</param>
            <remarks>
            Sends 3 values - two strings and an integer (the data).
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.WriteData(System.String,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Writes data to the specified <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/>'s <see cref="T:Microsoft.Xna.Framework.Net.PacketWriter"/> to be sent across the network.
            </summary>
            <param name="propertyName">The name of the property to send.</param>
            <param name="senderIndex">The index of the sender in the <see cref="P:Glib.XNA.NetworkLib.NetworkWatcherComponent.Session"/>'s LocalGamers collection.</param>
            <param name="data">The data to send.</param>
            <remarks>
            Sends 3 values - two strings and a vector array (the data).
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.WriteData(System.String,System.Int32,System.Int32[])">
            <summary>
            Writes data to the specified <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/>'s <see cref="T:Microsoft.Xna.Framework.Net.PacketWriter"/> to be sent across the network.
            </summary>
            <param name="propertyName">The name of the property to send.</param>
            <param name="senderIndex">The index of the sender in the <see cref="P:Glib.XNA.NetworkLib.NetworkWatcherComponent.Session"/>'s LocalGamers collection.</param>
            <param name="data">The data to send.</param>
            <remarks>
            Sends 3 values - two strings and an integer array (the data).
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.SendData(System.Int32)">
            <summary>
            Sends data for the specified <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/> across the network.
            </summary>
            <param name="senderIndex">The index of the <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/> that is in Session.LocalGamers to send data for.</param>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.SendData(System.Int32,Microsoft.Xna.Framework.Net.SendDataOptions)">
            <summary>
            Sends data for the specified <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/> across the network.
            </summary>
            <param name="senderIndex">The index of the <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/> that is in Session.LocalGamers to send data for.</param>
            <param name="options">The <see cref="T:Microsoft.Xna.Framework.Net.SendDataOptions"/> to send the data with.</param>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.SendData(System.Int32,Microsoft.Xna.Framework.Net.NetworkGamer,Microsoft.Xna.Framework.Net.SendDataOptions)">
            <summary>
            Sends data for the specified <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/> across the network.
            </summary>
            <param name="senderIndex">The index of the <see cref="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer"/> that is in Session.LocalGamers to send data for.</param>
            <param name="recipient">The recipient of the data, or null if to send to everyone.</param>
            <param name="options">The <see cref="T:Microsoft.Xna.Framework.Net.SendDataOptions"/> to send the data with.</param>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.ParseData(Microsoft.Xna.Framework.Net.PacketReader,System.String,System.Object@)">
            <summary>
            Parse the incoming data from the specified <see cref="T:Microsoft.Xna.Framework.Net.PacketReader"/> which is of the specified unknown type.
            </summary>
            <param name="activeReader">The <see cref="T:Microsoft.Xna.Framework.Net.PacketReader"/> containing the data.</param>
            <param name="typeString">The string representing the type of the data, according to the sender.</param>
            <param name="value">The actual data, represented as an instance of the type represented by typeString.</param>
            <returns>Whether this method successfully parsed the data.</returns>
            <remarks>
            The string typeString should be compared case insensitively.
            It is not recommended to call the implementation of this method present in GLib (if you are subclassing this component), because it is a placeholder method.
            The base implementation of this method merely sets the output parameters to null and returns false. It should not be invoked.
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkWatcherComponent.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Receives data from the network and updates the <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/>.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkWatcherComponent.IsNetworking">
            <summary>
            Gets a boolean indicating whether this <see cref="T:Glib.XNA.NetworkLib.NetworkWatcherComponent"/> is currently performing network logic.
            </summary>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkWatcherComponent.Session">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/> that this <see cref="T:Glib.XNA.NetworkLib.NetworkWatcherComponent"/> uses to send and receive data.
            </summary>
        </member>
        <member name="E:Glib.XNA.NetworkLib.NetworkWatcherComponent.NetworkInformationReceived">
            <summary>
            An event fired when information is received from the network.
            </summary>
            <remarks>
            If you do not subscribe to this event, sending information over the network is pointless.
            </remarks>
        </member>
        <member name="T:Glib.XNA.InputLib.JoystickMovedEventArgs">
            <summary>
            Represents event arguments for the movement of a joystick on an Xbox controller.
            </summary>
        </member>
        <member name="M:Glib.XNA.InputLib.JoystickMovedEventArgs.#ctor(System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new instance of <see cref="T:Glib.XNA.InputLib.JoystickMovedEventArgs"/>.
            </summary>
            <param name="joystick">The identifier for the joystick. -1 is left, 1 is right.</param>
            <param name="prevPos">The previous joystick position.</param>
            <param name="currentPos">The current joystick position.</param>
        </member>
        <member name="P:Glib.XNA.InputLib.JoystickMovedEventArgs.PreviousPosition">
            <summary>
            Gets the previous position of the joystick.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.JoystickMovedEventArgs.CurrentPosition">
            <summary>
            Gets the current position of the joystick.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.JoystickMovedEventArgs.Difference">
            <summary>
            Gets the difference between the current joystick position and the previous joystick position.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.JoystickMovedEventArgs.Joystick">
            <summary>
            Gets the joystick that moved (-1 is left and 1 is right joystick).
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.JoystickMovedEventArgs.IsRightJoystick">
            <summary>
            Gets a value indicating if the joystick that moved was the right joystick.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.JoystickMovedEventArgs.IsLeftJoystick">
            <summary>
            Gets a value indicating if the joystick that moved was the left joystick.
            </summary>
        </member>
        <member name="T:Glib.XNA.XnaExtensions">
            <summary>
            Extensions onto XNA objects.
            </summary>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.GetCharSize(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String)">
            <summary>
            Get the average size per character for this SpriteFont.
            </summary>
            <param name="font">The font to measure the character size of.</param>
            <param name="measurer">The string to use for determining the average size of one character.</param>
            <returns>The average character size for this SpriteFont.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.GetCharSize(Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Get the average size per character for this SpriteFont.
            </summary>
            <param name="font">The font to measure the character size of.</param>
            <returns>The average character size for this SpriteFont.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.AsPositionable(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts the specified vector to a positionable object.
            </summary>
            <param name="pos">The vector to convert to a positionable.</param>
            <returns>A positionable object with the position of the Vector2.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.GetCenterPosition(Glib.XNA.ISizable,Microsoft.Xna.Framework.Graphics.Viewport)">
            <summary>
            Get the position which would be required to center the specified sizable object to the specified Viewport, assuming is has an origin of (0, 0).
            </summary>
            <param name="obj">The sizable object to center.</param>
            <param name="centerTo">The viewport to center the ISizable to.</param>
            <returns>The position which would be required to center the specified sizable object.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.Inverse(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calculates the inverse of the specified vector (where new.X = orig.Y and new.Y = orig.X).
            </summary>
            <param name="vector">The vector to invert.</param>
            <returns>The inverse of the specified vector.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.GetCenterPosition(Glib.XNA.ISizable,Microsoft.Xna.Framework.Graphics.Viewport,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Get the position which would be required to center the specified sizable object to the specified Viewport.
            </summary>
            <param name="obj">The sizable object to center.</param>
            <param name="centerToViewport">The viewport to center the ISizable to.</param>
            <param name="origin">The origin of the ISizable.</param>
            <returns>The position which would be required to center the specified sizable object.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.ToAngle(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Convert a vector to a rotation angle in radians.
            </summary>
            <param name="vector">Vector2 to translate to rotation angle.</param>
            <param name="initialOffsetAngle">Rotation angle, in radians, by which the texture is offset. A rotation of zero means up.</param>
            <returns>Rotation angle, in radians.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.ToAngle(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Convert a vector to a rotation angle in radians, assuming the texture has an offset of 0.
            </summary>
            <param name="vector">Vector2 to translate to rotation angle.</param>
            <returns>Rotation angle, in radians.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.AngleToVector(System.Single)">
            <summary>
            Convert an angle in radians to a Vector2.
            </summary>
            <param name="angle">The angle to translate to a vector.</param>
            <returns>A vector representing a rotation angle in radians.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Draw the specified Sprite to this SpriteBatch.
            </summary>
            <param name="sb">The SpriteBatch to draw to.</param>
            <param name="sprToDraw">The sprite to draw.</param>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.AngleToVector(System.Double)">
            <summary>
            Convert an angle in radians to a Vector2.
            </summary>
            <param name="angle">The angle to translate to a vector.</param>
            <returns>A vector representing a rotation angle in radians.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.GetDistance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Get the distance between two points.
            </summary>
            <param name="startPoint">The starting point.</param>
            <param name="endpoint">The ending point.</param>
            <returns>The distance between these two Vector2 positions.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.GetHypotenuse(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Get the hypotenuse from the right triangle represented by this vector (side A = X, side B = Y).
            </summary>
            <param name="triangle">The known triangle sides represented as a Vector2 (must be a right triangle).</param>
            <returns>The length of the triangle's hypotenuse. Inaccurate if it is not a right triangle.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.IsRightTriangle(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines whether or not the specified triangle is a right triangle (where X is side A, Y is side B, and Z is the hypoentuse).
            </summary>
            <param name="triangle">The triangle to use when determining if this is a right triangle.</param>
            <returns>Whether or not the specified triangle is a right triangle.</returns>
        </member>
        <member name="M:Glib.XNA.XnaExtensions.NextVector2(System.Random,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Generates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> within the specified range.
            </summary>
            <param name="rand">The random generator to use for the creation of the variables.</param>
            <param name="minimumPos">The inclusive minimum position of the random vector.</param>
            <param name="maximumPos">The exclusive maximum position of the random vector.</param>
            <returns>A random <see cref="T:Microsoft.Xna.Framework.Vector2"/> within the specified bounds.</returns>
        </member>
        <member name="P:Glib.XNA.XnaExtensions.IsGuideVisible">
            <summary>
            Gets a boolean indicating whether or not the GamerServices guide is visible.
            </summary>
            <remarks>
            This property will return false in the case of lack of availability of gamer services.
            </remarks>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ParticleEngine.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.XNA.SpriteLib.ParticleEngine"/> namespace provides a basic implementation of a particle engine.
            </summary>
        </member>
        <member name="T:Glib.XNA.RandomPositionGenerator">
            <summary>
            Represents a class that generates positions randomly upon each call to <see cref="P:Glib.XNA.RandomPositionGenerator.Position"/>.
            </summary>
        </member>
        <member name="M:Glib.XNA.RandomPositionGenerator.#ctor(System.Random,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Glib.XNA.RandomPositionGenerator"/>.
            </summary>
            <param name="randGenerator">The object to use for generating random numbers.</param>
            <param name="minPos">The minimum position to generate.</param>
            <param name="maxPos">The maximum position to generate.</param>
        </member>
        <member name="M:Glib.XNA.RandomPositionGenerator.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Glib.XNA.RandomPositionGenerator"/>, initializing a new <see cref="T:System.Random"/> object.
            </summary>
            <param name="minPos">The minimum position to generate.</param>
            <param name="maxPos">The maximum position to generate.</param>
        </member>
        <member name="M:Glib.XNA.RandomPositionGenerator.#ctor(Microsoft.Xna.Framework.Graphics.Viewport)">
            <summary>
            Creates a new <see cref="T:Glib.XNA.RandomPositionGenerator"/>, using the size and position of the specified <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/> to bound the generated values.
            </summary>
            <param name="boundingViewport">The <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/> to use to bound the generated positions.</param>
        </member>
        <member name="P:Glib.XNA.RandomPositionGenerator.RandomGenerator">
            <summary>
            Gets the random generator used for generating random positions.
            </summary>
        </member>
        <member name="P:Glib.XNA.RandomPositionGenerator.MinimumPosition">
            <summary>
            Gets or sets the minimum position to generate.
            </summary>
        </member>
        <member name="P:Glib.XNA.RandomPositionGenerator.MaximumPosition">
            <summary>
            Gets or sets the maximum position to generate.
            </summary>
        </member>
        <member name="P:Glib.XNA.RandomPositionGenerator.Position">
            <summary>
            Gets the next random position.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.InputType">
            <summary>
            An enum representing an Xbox 360 controller input type.
            </summary>
        </member>
        <member name="F:Glib.XNA.InputLib.InputType.LeftJoystick">
            <summary>
            The left thumbstick.
            </summary>
        </member>
        <member name="F:Glib.XNA.InputLib.InputType.RightJoystick">
            <summary>
            The right joystick.
            </summary>
        </member>
        <member name="F:Glib.XNA.InputLib.InputType.DPad">
            <summary>
            The DPad.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.GamePadButtonEnumerator">
            <summary>
            A class representing a way to select and deselect buttons (TextSprites) using a GamePad.
            </summary>
            <remarks>
            This class depends on the GamePadManager. Ensure you have an InputManagerComponent in your Game before using this class.
            </remarks>
        </member>
        <member name="F:Glib.XNA.InputLib.GamePadButtonEnumerator.FireTextSpritePressed">
            <summary>
            If this boolean is true, instead of firing ButtonPress, the GamePadButtonEnumerator will fire Pressed on the TextSprite selected at the time of button press.
            </summary>
        </member>
        <member name="F:Glib.XNA.InputLib.GamePadButtonEnumerator.Input">
            <summary>
            The type of input to acknowledge for selecting various buttons.
            </summary>
        </member>
        <member name="F:Glib.XNA.InputLib.GamePadButtonEnumerator.SelectionSound">
            <summary>
            If not null, the sound to play when the button selection changes.
            </summary>
        </member>
        <member name="M:Glib.XNA.InputLib.GamePadButtonEnumerator.#ctor(Glib.XNA.SpriteLib.TextSprite[0:,0:],Glib.XNA.InputLib.InputType)">
            <summary>
            Creates a new GamePadButtonEnumerator with the specified buttons and input type, using an axis difference of 0.6, a delay of 250 milliseconds, player one's GamePad, and the A button.
            </summary>
            <param name="allButtons">All of the buttons to include in the GamePadButtonEnumerator.</param>
            <param name="inputType">The type of input to accept for GamePad-based button enumeration.</param>
        </member>
        <member name="M:Glib.XNA.InputLib.GamePadButtonEnumerator.#ctor(Glib.XNA.SpriteLib.TextSprite[0:,0:],Glib.XNA.InputLib.InputType,System.Single,System.TimeSpan,Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Creates a new GamePadButtonEnumerator with the specified buttons and parameters.
            </summary>
            <param name="allButtons">All of the buttons to include in the GamePadButtonEnumerator.</param>
            <param name="inputType">The type of input to accept for GamePad-based button enumeration.</param>
            <param name="axisDifference">The difference along the X or Y axis required on a GamePad joystick to trigger movement (after delay). This parameter does nothing if inputType is DPad.</param>
            <param name="delay">The time required to pass between button selection changes. This parameter does nothing if inputType is DPad.</param>
            <param name="submitButton">The button on the GamePad controller which must be pushed to trigger a ButtonPress event.</param>
            <param name="player">The PlayerIndex to accept GamePad input from.</param>
        </member>
        <member name="M:Glib.XNA.InputLib.GamePadButtonEnumerator.MoveSelection(Glib.XNA.SpriteLib.Direction)">
            <summary>
            Move the current selection by 1 button, resetting to the top or side if neccesary.
            </summary>
        </member>
        <member name="M:Glib.XNA.InputLib.GamePadButtonEnumerator.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update this GamePadButtonEnumerator.
            </summary>
            <param name="gt">The current GameTime.</param>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadButtonEnumerator.AllButtons">
            <summary>
            Gets a two-dimensional array of all of the buttons to enumerate through.
            </summary>
            <remarks>
            This array is in [row, column] format.
            </remarks>
        </member>
        <member name="E:Glib.XNA.InputLib.GamePadButtonEnumerator.ButtonPress">
            <summary>
            An event fired when a button is pressed.
            </summary>
            <remarks>
            The source of this event will be marked as the button that was pressed.
            </remarks>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadButtonEnumerator.AxisDifference">
            <summary>
            The difference along the X or Y axis required on a GamePad joystick to trigger movement (after delay).
            </summary>
            <remarks>
            This value is ignored if Input is DPad.
            </remarks>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadButtonEnumerator.Delay">
            <summary>
            Gets or sets the delay that the user must wait while holding an input button before the selection takes effect.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadButtonEnumerator.SubmitButton">
            <summary>
            Gets or sets the button to use for triggering a ButtonPress event.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadButtonEnumerator.Player">
            <summary>
            Gets the player to receive GamePad input from.
            </summary>
        </member>
        <member name="T:Glib.XNA.ImageFormat">
            <summary>
            Represents the format of a graphical image.
            </summary>
        </member>
        <member name="F:Glib.XNA.ImageFormat.JPEG">
            <summary>
            A JPEG image.
            </summary>
        </member>
        <member name="F:Glib.XNA.ImageFormat.PNG">
            <summary>
            A portable network graphics image.
            </summary>
        </member>
        <member name="F:Glib.XNA.ImageFormat.GIF">
            <summary>
            A GIF image.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.VideoSprite">
            <summary>
            A sprite that displays a video.
            </summary>
            <remarks>
            This class performs calculations that assume that the game operates at a constant framerate.
            </remarks>
        </member>
        <member name="F:Glib.XNA.SpriteLib.VideoSprite.VideoSize">
            <summary>
            The size of the video.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.VideoSprite.#ctor(Microsoft.Xna.Framework.Media.Video,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Creates a <see cref="T:Glib.XNA.SpriteLib.VideoSprite"/> and begins playing the video.
            </summary>
            <param name="videoToPlay">The <see cref="T:Microsoft.Xna.Framework.Media.Video"/> to play.</param>
            <param name="position">The position of the <see cref="T:Glib.XNA.SpriteLib.VideoSprite"/>.</param>
            <param name="spriteBatch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to render the <see cref="T:Microsoft.Xna.Framework.Media.Video"/> to play.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.VideoSprite.Update">
            <summary>
            Updates the video.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.VideoSprite.Dispose">
            <summary>
            Disposes of this <see cref="T:Glib.XNA.SpriteLib.VideoSprite"/>.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.VideoSprite.Video">
            <summary>
            Gets the <see cref="T:Microsoft.Xna.Framework.Media.VideoPlayer"/> representing the current video.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.TextSprite">
            <summary>
            An ISprite representing text.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.Draw">
            <summary>
            Draw this text sprite to the SpriteBatch.
            Does not begin or end the SpriteBatch.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.Update">
            <summary>
            Update the TextSprite.
            </summary>
            <remarks>
            Uses the InputLib.MouseManager.CurrentMouseState for mouse data.
            </remarks>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.CallKeyboardClickEvent">
            <summary>
            Whether or not to call Clicked events for keypresses of Enter.
            </summary>
            <remarks>
            For this to take effect, KeyboardManager must be updated.
            </remarks>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.HoverColor">
            <summary>
            The color to use when hovering over the TextSprite, if hovering is enabled.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.NonHoverColor">
            <summary>
            The color to use when not hovering over the TextSprite, if hovering is enabled.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont,System.String)">
            <summary>
            Construct a new TextSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteFont,System.String)">
            <summary>
            Construct a new TextSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            Construct a new TextSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextSprite.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            Construct a new TextSprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.Font">
            <summary>
            The SpriteFont to use.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.Color">
            <summary>
            The color to draw the text as.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.SpriteBatch">
            <summary>
            The SpriteBatch to draw this text sprite to.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.Scale">
            <summary>
            The scale of this TextSprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextSprite.Rotation">
            <summary>
            The rotation of the TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.LayerDepth">
            <summary>
            Gets or sets the layer depth at which to render the <see cref="T:Glib.XNA.SpriteLib.TextSprite"/>.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.TextSprite.TextChanged">
            <summary>
            An event fired when the text of this TextSprite changes.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Shadow">
            <summary>
            Gets or sets the shadow of this <see cref="T:Glib.XNA.SpriteLib.TextSprite"/>.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.ShadowColor">
            <summary>
            The color that, if applicable, this TextSprite should be shadowed with.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.IsShadowed">
            <summary>
            Gets or sets a boolean indicating whether or not this TextSprie is shadowed.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Visible">
            <summary>
            Gets or sets a boolean indicating whether or not this TextSprite is visible.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.TextSprite.Pressed">
            <summary>
            An event fired after every click or keyboard selection of this TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.IsSelected">
            <summary>
            Gets or sets a boolean indicating whether or not this is a selected TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.IsManuallySelectable">
            <summary>
            Gets or sets a boolean indicating whether or not this TextSprite will be selected by ways other than the mouse cursor.
            If this is true, the mouse cursor will be ignored.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.ParentSprite">
            <summary>
            Gets or sets the parent sprite (such as a button image) of this TextSprite.
            If not null, all selection, click, and positioning logic logic will be performed relative to this Sprite.
            This includes centering this TextSprite to the specified ParentSprite upon set.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.IsHoverable">
            <summary>
            Gets or sets a boolean indicating whether or not to apply hover effects to this TextSprite.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.TextSprite.Updated">
            <summary>
            An event called after every update of this TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Width">
            <summary>
            Gets the width of the TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Height">
            <summary>
            Gets the height of the TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.X">
            <summary>
            The current X coordinate of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Y">
            <summary>
            The current Y coordinate of the sprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Text">
            <summary>
            Gets or sets the text of this TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextSprite.Position">
            <summary>
            The position to draw the text.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool">
            <summary>
            A class for the storage of particles.
            </summary>
            <remarks>
            An attempt to avoid garbage collection. This class stores and manages all particles.
            </remarks>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool.ParticleCountGenerate">
            <summary>
            The number of particles at which <see cref="F:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool.ParticlesLowGeneration"/> more particles will be generated.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool.ParticlesLowGeneration">
            <summary>
            The number of particles to generate when the particle count drops below <see cref="F:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool.ParticleCountGenerate"/>.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool.ParticlesToGenerate">
            <summary>
            The number of particles to generate on pool initialization.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool.GenerateParticle">
            <summary>
            Generates a particle. This method should not be called to retrieve a particle for use, use <see cref="M:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool.GetParticle(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2)"/> instead.
            </summary>
            <returns>A new particle.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool.ClearPool">
            <summary>
            Clears the <see cref="T:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool"/> of generated particles, and regenerates particles.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Creates a new <see cref="T:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool"/>.
            </summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to use for particle generation.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool.ReturnParticle(Glib.XNA.SpriteLib.ParticleEngine.Particle)">
            <summary>
            Returns a "dead" particle to the pool.
            </summary>
            <param name="particle">The particle to return.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool.GetParticle(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets a particle from the pool.
            </summary>
            <param name="particleImg">The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> to display on the particle.</param>
            <param name="particleLocation">The location of the particle.</param>
            <returns>A particle from the particle pool.</returns>
        </member>
        <member name="T:Glib.XNA.ThreeDimensional.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.XNA.ThreeDimensional"/> namespace provides 3D utilities.
            </summary>
            <remarks>
            This namespace is in beta.
            </remarks>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ParticleEngine.IParticleGenerator">
            <summary>
            Represents an interface for a class that can generate particles.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.IParticleGenerator.GenerateParticle(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Generates a new particle at the specified position.
            </summary>
            <returns>An initialized particle from the pool.</returns>
            <param name="pos">The position of the object to create particles around.</param>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.IParticleGenerator.ParticlesToGenerate">
            <summary>
            Gets the number of particles to create within an update.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.IParticleGenerator.Pool">
            <summary>
            Gets the <see cref="T:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool"/> used as the source of particles for this <see cref="T:Glib.XNA.SpriteLib.ParticleEngine.IParticleGenerator"/>.
            </summary>
        </member>
        <member name="T:Glib.XNA.IGravitySource">
            <summary>
            An interface representing a gravity source.
            </summary>
        </member>
        <member name="M:Glib.XNA.IGravitySource.GetAttraction(Glib.XNA.IPositionable)">
            <summary>
            Gets the force of attraction for an object affected by this gravity.
            </summary>
            <param name="attracted">The object that is being attracted to this gravity source.</param>
            <returns>The amount to pull the object, in the X and Y axis, towards the gravity source.</returns>
        </member>
        <member name="P:Glib.XNA.IGravitySource.Position">
            <summary>
            Gets or sets the position of the gravity source.
            </summary>
        </member>
        <member name="T:Glib.XNA.ITimerSprite">
            <summary>
            A basic sprite, supporting updates with a GameTime object passed in and draws.
            </summary>
        </member>
        <member name="M:Glib.XNA.ITimerSprite.Draw">
            <summary>
            Draw the ITimerSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.ITimerSprite.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update the ITimerSprite as applicable (do logic here), using a GameTime object.
            </summary>
        </member>
        <member name="T:Glib.XNA.NetworkLib.NetworkInformationReceivedEventArgs">
            <summary>
            A class representing the event arguments for the NetworkInformationReceived event.
            </summary>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkInformationReceivedEventArgs.#ctor">
            <summary>
            Create a new <see cref="T:Glib.XNA.NetworkLib.NetworkInformationReceivedEventArgs"/> with no data.
            </summary>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkInformationReceivedEventArgs.Recipient">
            <summary>
            Gets the recipient of this property information.
            </summary>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkInformationReceivedEventArgs.Data">
            <summary>
            Gets the sent data.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.DPadEvents">
            <summary>
            A class containing DPad related Xbox 360 controller events.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.DPadEvents.LeftArrowPressed">
            <summary>
            An event fired when the left DPad key is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.DPadEvents.LeftArrowReleased">
            <summary>
            An event fired when the left DPad key is released.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.DPadEvents.RightArrowPressed">
            <summary>
            An event fired when the right DPad key is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.DPadEvents.RightArrowReleased">
            <summary>
            An event fired when the right DPad key is released.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.DPadEvents.UpArrowPressed">
            <summary>
            An event fired when the up DPad key is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.DPadEvents.UpArrowReleased">
            <summary>
            An event fired when the up DPad key is released.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.DPadEvents.DownArrowPressed">
            <summary>
            An event fired when the down DPad key is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.DPadEvents.DownArrowReleased">
            <summary>
            An event fired when the down DPad key is released.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.ControllerButtonEvents">
            <summary>
            A class containing button related Xbox 360 controller events.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.AButtonPressed">
            <summary>
            An event fired when the A button is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.BButtonPressed">
            <summary>
            An event fired when the B button is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.BButtonReleased">
            <summary>
            An event fired when the B button is released.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.AButtonReleased">
            <summary>
            An event fired when the A button is released.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.LeftShoulderPressed">
            <summary>
            An event fired when the left shoulder is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.YButtonPressed">
            <summary>
            An event fired when the Y button is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.YButtonReleased">
            <summary>
            An event fired when the Y button is released.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.XButtonPressed">
            <summary>
            An event fired when the X button is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.XButtonReleased">
            <summary>
            An event fired when the X button is released.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.StartButtonPressed">
            <summary>
            An event fired when the start button is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.StartButtonReleased">
            <summary>
            An event fired when the start button is released.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.BackButtonPressed">
            <summary>
            An event fired when the back button is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.BackButtonReleased">
            <summary>
            An event fired when the back button is released.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.RightShoulderPressed">
            <summary>
            An event fired when the right shoulder is pressed.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.LeftShoulderReleased">
            <summary>
            An event fired when the left shoulder is released.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.ControllerButtonEvents.RightShoulderReleased">
            <summary>
            An event fired when the right shoulder is released.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.ControllerButtonEvents.State">
            <summary>
            Gets the current state of <see cref="T:Microsoft.Xna.Framework.Input.GamePad"/> buttons.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.GamePadManager">
            <summary>
            A manager of GamePad related information. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Glib.XNA.InputLib.GamePadManager.UpdateAll">
            <summary>
            Updates all GamePadButtonEnumerator instances.
            </summary>
        </member>
        <member name="M:Glib.XNA.InputLib.GamePadManager.GetManager(Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Gets the GamePadManager for the specified player's controller.
            </summary>
            <param name="player">The PlayerIndex of the player to retrieve a GamePadManager for.</param>
            <returns>The GamePadManager of the specified player's controller.</returns>
        </member>
        <member name="M:Glib.XNA.InputLib.GamePadManager.Update">
            <summary>
            Update the GamePadManager.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadManager.One">
            <summary>
            Gets the GamePadManager representing player one's controller.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadManager.Two">
            <summary>
            Gets the GamePadManager representing player two's controller.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadManager.Three">
            <summary>
            Gets the GamePadManager representing player three's controller.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadManager.Four">
            <summary>
            Gets the GamePadManager representing player four's controller.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadManager.Player">
            <summary>
            Gets the player whos control is associated with this GamePadManager.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadManager.Buttons">
            <summary>
            Gets a class containing button-related Xbox 360 controller events.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadManager.DPad">
            <summary>
            Gets a class containing DPad-related Xbox 360 controller events.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.GamePadManager.JoystickMoved">
            <summary>
            An event fired when a joystick has moved.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.GamePadManager.LeftTriggerMoved">
            <summary>
            An event fired when the left trigger has moved.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.GamePadManager.RightTriggerMoved">
            <summary>
            An event fired when the right trigger has moved.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.GamePadManager.GamePadDisconnected">
            <summary>
            An event fired when the GamePad has been disconnected.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.GamePadManager.GamePadConnected">
            <summary>
            An event fired when the GamePad has been connected.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.GamePadManager.Updated">
            <summary>
            An event fired after the completion of the update of this GamePadManager, but before Last is assigned.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadManager.Current">
            <summary>
            Gets the current GamePad state for this player.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.GamePadManager.Last">
            <summary>
            Gets the last GamePad state for this player.
            </summary>
        </member>
        <member name="T:Glib.XNA.KeyEventHandler">
            <summary>
            Handle when a keyboard event happens.
            </summary>
            <param name="sender">The SpriteManager that is intercepting the key event.</param>
            <param name="e">The <seealso cref="T:Glib.XNA.KeyEventArgs">KeyEventArgs</seealso> for this event.</param>
        </member>
        <member name="T:Glib.XNA.SingleKeyEventHandler">
            <summary>
            Handle when a keyboard event happens for a single key.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <seealso cref="T:Glib.XNA.SingleKeyEventArgs">SingleKeyEventArgs</seealso> for this event.</param>
        </member>
        <member name="T:Glib.XNA.DragEventArgs">
            <summary>
            Event arguments for a possible mouse drag.
            </summary>
        </member>
        <member name="M:Glib.XNA.DragEventArgs.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Create a new <see cref="T:Glib.XNA.DragEventArgs"/>, specifying an old position and a new position.
            </summary>
            <param name="newPos">The new position of the dragged object.</param>
            <param name="oldPos">The old position of the dragged object.</param>
        </member>
        <member name="P:Glib.XNA.DragEventArgs.NewPosition">
            <summary>
            Gets the new position of the object.
            </summary>
        </member>
        <member name="P:Glib.XNA.DragEventArgs.OldPosition">
            <summary>
            Gets the old position of the object.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteMoveEventArgs">
            <summary>
            Event arguments for a sprite movement.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteMoveEventArgs.OldPosition">
            <summary>
            The old position of the sprite
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteMoveEventArgs.NewPosition">
            <summary>
            The position the sprite is going to be moved to.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteMoveEventArgs.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Create a new SpriteMoveEventArgs, specifying an old position and a new position.
            </summary>
            <param name="OldPos">The old position.</param>
            <param name="NewPos">The new position.</param>
        </member>
        <member name="T:Glib.XNA.SpriteClickEventArgs">
            <summary>
            Event arguments for a sprite click.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteClickEventArgs.X">
            <summary>
            The X coordinate of the click on the screen.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteClickEventArgs.CalledByManager">
            <summary>
            Whether or not this event is being called by a SpriteManager.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteClickEventArgs.Y">
            <summary>
            The Y coordinate of the click on the screen.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteClickEventArgs.Sprite">
            <summary>
            The sprite that was clicked on.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteClickEventArgs.#ctor(Glib.XNA.SpriteLib.Sprite,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a new SpriteClickEventArgs, specifying a position and sprite.
            </summary>
            <param name="x">The X position of the click.</param>
            <param name="y">The Y position of the click.</param>
            <param name="spr">The sprite that was clicked on.</param>
            <param name="manager">Whether or not this event is being called by a SpriteManager.</param>
        </member>
        <member name="T:Glib.XNA.KeyEventArgs">
            <summary>
            Event arguments for a key event.
            </summary>
        </member>
        <member name="F:Glib.XNA.KeyEventArgs.PressedKeys">
            <summary>
            All the pressed keys in this event.
            </summary>
        </member>
        <member name="M:Glib.XNA.KeyEventArgs.KeyIsPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Whether or not the given key is pressed in this event.
            </summary>
            <param name="k">The key to check if it is being pressed.</param>
            <returns>A boolean representing whether or not the given key is pressed.</returns>
        </member>
        <member name="M:Glib.XNA.KeyEventArgs.#ctor(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Input.Keys})">
            <summary>
            Construct a new KeyEventArgs.
            </summary>
            <param name="pressedKeys">The keys pressed for this event.</param>
        </member>
        <member name="P:Glib.XNA.KeyEventArgs.Alt">
            <summary>
            A boolean representing whether or not the Alt modifier key is pressed.
            </summary>
        </member>
        <member name="P:Glib.XNA.KeyEventArgs.Control">
            <summary>
            A boolean representing whether or not the Control modifier key is pressed.
            </summary>
        </member>
        <member name="P:Glib.XNA.KeyEventArgs.Shift">
            <summary>
            A boolean representing whether or not the Shift modifier key is pressed.
            </summary>
        </member>
        <member name="T:Glib.XNA.SingleKeyEventArgs">
            <summary>
            Event arguments for a single key event.
            </summary>
        </member>
        <member name="M:Glib.XNA.SingleKeyEventArgs.#ctor(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Construct a new SingleKeyEventArgs.
            </summary>
            <param name="pressedKey">The key associated with this event.</param>
        </member>
        <member name="P:Glib.XNA.SingleKeyEventArgs.Key">
            <summary>
            Gets the key associated with this event.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.XNA.SpriteLib"/> namespace provides various sprite utilities for XNA.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.InputManagerComponent">
            <summary>
            Represents a game component responsible for updating input management classes.
            </summary>
            <remarks>
            This is intended to be added to the Components collection of a game to handle updating of input related classes.
            </remarks>
        </member>
        <member name="M:Glib.XNA.InputLib.InputManagerComponent.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Creates a new InputManagerComponent.
            </summary>
            <param name="game">The Game associated with this component.</param>
        </member>
        <member name="M:Glib.XNA.InputLib.InputManagerComponent.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the InputManagerComponent, calling the Update method on all input related classes.
            </summary>
            <param name="gameTime">The current GameTime.</param>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ParticleEngine.AbstractParticleGenerator">
            <summary>
            A class that provides a basis for generating particles with a fixed set of settings.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.AbstractParticleGenerator._batch">
            <summary>
            The underlying field for the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> property.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.AbstractParticleGenerator.SetProperties(Glib.XNA.SpriteLib.ParticleEngine.Particle)">
            <summary>
            Set the desired properties on the specified generated particle.
            </summary>
            <param name="particle">The particle to set properties on.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.AbstractParticleGenerator.GenerateParticle(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Generates a new particle at the specified position.
            </summary>
            <returns>A new particle.</returns>
            <param name="pos">The position of the object to create particles around.</param>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.AbstractParticleGenerator.ParticlesToGenerate">
            <summary>
            Gets or sets the number of particles to create within an update.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.AbstractParticleGenerator.Texture">
            <summary>
            Gets or sets the texture to generate particles with.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.AbstractParticleGenerator.Batch">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to generate particles with.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.AbstractParticleGenerator.Pool">
            <summary>
            Gets the <see cref="T:Glib.XNA.SpriteLib.ParticleEngine.ParticlePool"/> used for generation of particles.
            </summary>
        </member>
        <member name="T:Glib.XNA.InputLib.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.XNA.InputLib"/> namespace provides various XNA input utilities.
            </summary>
        </member>
        <member name="T:Glib.XNA.ThreeDimensional.ModelRenderer">
            <summary>
            A class that assists with the rendering of a 3D model.
            </summary>
        </member>
        <member name="M:Glib.XNA.ThreeDimensional.ModelRenderer.#ctor(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.Viewport)">
            <summary>
            Create a new <see cref="T:Glib.XNA.ThreeDimensional.ModelRenderer"/> to render the specified <see cref="T:Microsoft.Xna.Framework.Graphics.Model"/>.
            </summary>
            <param name="model">The model to render.</param>
            <param name="screen">The <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/> on which the <see cref="T:Microsoft.Xna.Framework.Graphics.Model"/> will be rendered.</param>
        </member>
        <member name="M:Glib.XNA.ThreeDimensional.ModelRenderer.#ctor(Microsoft.Xna.Framework.Graphics.Model,System.Single)">
            <summary>
            Create a new <see cref="T:Glib.XNA.ThreeDimensional.ModelRenderer"/> to render the specified <see cref="T:Microsoft.Xna.Framework.Graphics.Model"/>.
            </summary>
            <param name="model">The model to render.</param>
            <param name="aspectRatio">The aspect ratio of the <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/> on which the <see cref="T:Microsoft.Xna.Framework.Graphics.Model"/> will be rendered.</param>
        </member>
        <member name="F:Glib.XNA.ThreeDimensional.ModelRenderer._calculatedWorldEffect">
            <summary>
            A boolean indicating whether or not the most up-to-date world effect has been calculated.
            </summary>
        </member>
        <member name="F:Glib.XNA.ThreeDimensional.ModelRenderer._calculatedViewEffect">
            <summary>
            A boolean indicating whether or not the most up-to-date view effect has been calculated.
            </summary>
        </member>
        <member name="M:Glib.XNA.ThreeDimensional.ModelRenderer.Draw">
            <summary>
            Renders this model to the GraphicsDevice.
            </summary>
        </member>
        <member name="M:Glib.XNA.ThreeDimensional.ModelRenderer.Update">
            <summary>
            When implemented in a subclass, updates the model.
            </summary>
        </member>
        <member name="P:Glib.XNA.ThreeDimensional.ModelRenderer.Model">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Xna.Framework.Graphics.Model"/> to render.
            </summary>
        </member>
        <member name="P:Glib.XNA.ThreeDimensional.ModelRenderer.Rotation">
            <summary>
            Gets or sets the rendering rotation of the model.
            </summary>
        </member>
        <member name="P:Glib.XNA.ThreeDimensional.ModelRenderer.AspectRatio">
            <summary>
            Gets or sets the aspect ratio of the <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/> on which the <see cref="T:Microsoft.Xna.Framework.Graphics.Model"/> will be rendered.
            </summary>
            <remarks>
            Recalculates the projection matrix using default values.
            </remarks>
        </member>
        <member name="P:Glib.XNA.ThreeDimensional.ModelRenderer.Position">
            <summary>
            Gets or sets the position of the model.
            </summary>
        </member>
        <member name="P:Glib.XNA.ThreeDimensional.ModelRenderer.CameraPosition">
            <summary>
            Gets or sets of the position of the camera looking at the model.
            </summary>
        </member>
        <member name="P:Glib.XNA.ThreeDimensional.ModelRenderer.CameraTarget">
            <summary>
            Gets or sets the target position of the camera.
            </summary>
        </member>
        <member name="P:Glib.XNA.ThreeDimensional.ModelRenderer.ProjectionMatrix">
            <summary>
            Gets or sets the projection matrix to use when rendering.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteMoveEventHandler">
            <summary>
            Handle when a sprite is going to be moved. This is a cancellable event.
            </summary>
            <param name="source">The sprite that is undergoing an attempt to be moved.</param>
            <param name="e">The <seealso cref="T:Glib.XNA.SpriteMoveEventArgs">SpriteMoveEventArgs</seealso> for this event.</param>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteClickEventHandler">
            <summary>
            Handle when a sprite has been clicked on. Called immediately after Update() on a Sprite.
            </summary>
            <param name="source">The SpriteManager that is managing this sprite, or, if this event is being called by the sprite itself, the sprite being clicked on.</param>
            <param name="e">The <seealso cref="T:Glib.XNA.SpriteMoveEventArgs">SpriteMoveEventArgs</seealso> for this event.</param>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ParticleEngine.ParticleEngine">
            <summary>
            A class that manages multiple particles.
            </summary>
            <remarks>
            This class handles updating and drawing of particles.
            Does not manage the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.ParticleEngine.#ctor(Glib.XNA.SpriteLib.ParticleEngine.IParticleGenerator)">
            <summary>
            Creates a particle engine using the specified generator.
            </summary>
            <param name="particleGenerator">The particle generator to use.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.ParticleEngine.Draw">
            <summary>
            Draws all of the particles being managed by this particle manager.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.ParticleEngine.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates all of the particles being managed by this particle manager.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.ParticleEngine.FramesPerGeneration">
            <summary>
            Gets or sets the number of frames to allow to pass before each particle generation burst.
            </summary>
            <remarks>
            This property allows for behavior such as that generated by the following:
            <code>
            //If FramesPerGeneration frames have passed since the last time FramesPerGeneration frames passed, generate particles
            if(_framesPassed % FramesPerGeneration == 0){
                //Generates particles, this only adds one but real implementation would account for Generator.ParticlesToGenerate
                Particles.Add(Generator.GenerateParticle(Tracked.Position + PositionOffset));
            }
            </code>
            This means that every FramesPerGeneration frames, Generator.ParticlesToGenerate particles will be generated.
            For example, if FramesPerGeneration is 2 and Generator.ParticlesToGenerate is 40, every 2 frames 40 particles will be generated.
            By default this value is 1.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.ParticleEngine.ParticlesVisible">
            <summary>
            Gets or sets a boolean indicating whether the particles for the tracked object should be drawn.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.ParticleEngine.PositionOffset">
            <summary>
            Gets or sets the offset from the position of <see cref="P:Glib.XNA.SpriteLib.ParticleEngine.ParticleEngine.Tracked"/> at which to generate the particles.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.ParticleEngine.Tracked">
            <summary>
            Gets or sets the object that this particle engine tracks and creates particles near.
            </summary>
            <remarks>
            If this is null, the particle engine will not generate new particles.
            This is intended to be a reference to an object.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.ParticleEngine.Particles">
            <summary>
            Gets the collection of particles that this particle engine currently manages.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.ParticleEngine.Generator">
            <summary>
            Gets or sets the object to use for generating particles.
            </summary>
        </member>
        <member name="T:Glib.XNA.GameTimer">
            <summary>
            A timer firing events at set intervals during the game.
            </summary>
        </member>
        <member name="M:Glib.XNA.GameTimer.#ctor(Microsoft.Xna.Framework.Game,System.TimeSpan)">
            <summary>
            Create a new GameTimer with the specified interval.
            </summary>
            <param name="associatedGame">The Game to attach this GameTimer to.</param>
            <param name="timePassing">The interval between calls to Elapsed.</param>
        </member>
        <member name="M:Glib.XNA.GameTimer.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update the GameTimer, calling the Elapsed event if neccesary.
            </summary>
            <param name="gt">The current GameTime.</param>
        </member>
        <member name="M:Glib.XNA.GameTimer.#ctor(Microsoft.Xna.Framework.Game,System.Int32)">
            <summary>
            Create a new GameTimer with the specified interval.
            </summary>
            <param name="associatedGame">The Game to attach this GameTimer to.</param>
            <param name="msTimePassing">The interval (in milliseconds) between calls to Elapsed.</param>
        </member>
        <member name="P:Glib.XNA.GameTimer.Time">
            <summary>
            Gets or sets the interval of time to fire events from.
            </summary>
        </member>
        <member name="E:Glib.XNA.GameTimer.Elapsed">
            <summary>
            An event called after every elapse of the time specified by this GameTimer.
            </summary>
        </member>
        <member name="P:Glib.XNA.GameTimer.IsRepeating">
            <summary>
            Gets or sets a boolean indeicating whether or not this timer is repeating.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteSheet">
            <summary>
            A class representing a Sprite from a sprite sheet. Supports sprite sheet animation.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteSheet.DefaultAnimationDelay">
            <summary>
            The default delay between animations in milliseconds.
            Set to 0 to update every call to Update().
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteSheet.CurrentSprite">
            <summary>
            The currently selected Sprite, where X is the zero-based column and Y is the zero-based row.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.GetDrawRegion(System.Int32,System.Int32)">
            <summary>
            Get the region drawn relative to the upper left corner of this SpriteSheet based on the given row and column.
            </summary>
            <param name="row">The zero-based row of sprites to draw from.</param>
            <param name="column">The zero-based column of sprites to draw from.</param>
            <returns>The region to draw with the gived row and column.</returns>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteSheet.SpriteSize">
            <summary>
            The size of one Sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteSheet.AnimationDelay">
            <summary>
            The delay between changes of the sprite (animation) in this SpriteSheet, if any.
            </summary>
            <remarks>
            Set to no time to change every update.
            Set to null to not animate.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Construct a new SpriteSheet.
            </summary>
            <param name="sheet">The Texture2D of the actual sprite sheet.</param>
            <param name="size">The size of one sprite (X and Y are ignored in this paramater).</param>
            <param name="position">The initial position of this SpriteSheet.</param>
            <param name="sb">The SpriteBatch used for drawing.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32)">
            <summary>
            Construct a new SpriteSheet.
            </summary>
            <param name="sheet">The Texture2D of the actual sprite sheet.</param>
            <param name="size">The size of one sprite (X and Y are ignored in this paramater).</param>
            <param name="position">The initial position of this SpriteSheet.</param>
            <param name="sb">The SpriteBatch used for drawing.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.#ctor(Microsoft.Xna.Framework.Content.ContentManager,System.String,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Construct a new SpriteSheet.
            </summary>
            <param name="manager">The ContentManager used to load the Texture2D of the ssprite sheet.</param>
            <param name="assetName">The asset name of the Texture2D containing the sprite sheet.</param>
            <param name="size">The size of one sprite (X and Y are ignored in this paramater).</param>
            <param name="position">The initial position of this SpriteSheet.</param>
            <param name="sb">The SpriteBatch used for drawing.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Call the Updated event of this SpriteSheet, and animate the SpriteSheet if applicable.
            </summary>
            <param name="gt">The GameTime object passed to a Game's Update(GameTime) method.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteSheet.Update">
            <summary>
            Call the Updated event of this SpriteSheet, WITHOUT ANIMATION TICKS.
            Will only animate if AnimationDelay is set to 0 milliseconds.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.RestartAnimation">
            <summary>
            Whether or not to restart the animation when completed.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.IsComplete">
            <summary>
            Whether or not the animation is complete.
            </summary>
            <remarks>
            Is always false if RestartAnimation is true.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.CurrentRow">
            <summary>
            The current zero-based row of Sprites in this SpriteSheet.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.Width">
            <summary>
            A scale-sensitive width of 1 sprite. Use SpriteSize.Width not to account for scale.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.Height">
            <summary>
            A scale-sensitive height of 1 sprite. Use SpriteSize.Height not to account for scale.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.CurrentColumn">
            <summary>
            The current zero-based column of Sprites in this SpriteSheet.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.Columns">
            <summary>
            The number of columns of Sprites in this SpriteSheet.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.Rows">
            <summary>
            The number of rows in this SpriteSheet.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.IsAnimated">
            <summary>
            A boolean representing whether or not this SpriteSheet is automatically animated.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.DrawRegion">
            <summary>
            Gets the current drawing region of the SpriteSheet.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.SpriteSheet.AnimationCompleted">
            <summary>
            An event fired when the animation is completed, and either ends or is about to restart.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteSheet.Origin">
            <summary>
            Gets the effective origin of the Sprite.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteOriginType">
            <summary>
            An enum indicating the origin type of a Sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteOriginType.Zero">
            <summary>
            The origin is located at 0,0 relative to the Sprite. This is the default.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteOriginType.Center">
            <summary>
            The origin is located at the center of the Sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.SpriteOriginType.Custom">
            <summary>
            The origin is a user-specified value.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ParticleEngine.TimeToLiveSettings">
            <summary>
            An enum representing how to apply the time to live property of a <see cref="T:Glib.XNA.SpriteLib.ParticleEngine.Particle"/>.
            </summary>
            <remarks>
            Using flags to combine StrictTTL with any of the AlphaLess enumerator constants will render the particle dead when the alpha drops below the specified level or when the time to live has dropped below zero, whichever comes first.
            AlphaLess flags render the particle dead when the alpha value of the tint color of the particle has reached that value (or below it).
            </remarks>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.TimeToLiveSettings.StrictTTL">
            <summary>
            Kill the particle when its remaining time to live is less than or equal to zero.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.TimeToLiveSettings.AlphaLess175">
            <summary>
            Kill the particle when its tint color has an alpha value of 175 or less.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.TimeToLiveSettings.AlphaLess150">
            <summary>
            Kill the particle when its tint color has an alpha value of 150 or less.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.TimeToLiveSettings.AlphaLess125">
            <summary>
            Kill the particle when its tint color has an alpha value of 125 or less.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.TimeToLiveSettings.AlphaLess100">
            <summary>
            Kill the particle when its tint color has an alpha value of 100 or less.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.TimeToLiveSettings.AlphaLess75">
            <summary>
            Kill the particle when its tint color has an alpha value of 75 or less.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.TimeToLiveSettings.AlphaLess50">
            <summary>
            Kill the particle when its tint color has an alpha value of 50 or less.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.TimeToLiveSettings.AlphaLess25">
            <summary>
            Kill the particle when its tint color has an alpha value of 25 or less.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator">
            <summary>
            A class that generates particles randomly.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.Texture2D[])">
            <summary>
            Creates a new random particle generator.
            </summary>
            <param name="textures">The possible textures to assign the particle.</param>
            <param name="batch">The SpriteBatch that the particles will appear on.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.GenerateParticle(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Generates a new particle at the specified position.
            </summary>
            <returns>A new particle.</returns>
            <param name="pos">The position of the object to create particles around.</param>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.ParticlesToGenerate">
            <summary>
            Gets or sets the number of particles to create within an update.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.Pool">
            <summary>
            Gets the particle pool used for generation of particles.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.Textures">
            <summary>
            Gets the collection of textures to generate particles with.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.MaximumTimeToLive">
            <summary>
            Gets or sets the maximum time to live for a particle.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.MinimumTimeToLive">
            <summary>
            Gets or sets the minimum time to live for a particle.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.Random">
            <summary>
            Gets or sets the random generator to use in the generation of particles.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.TTLSettings">
            <summary>
            Gets or sets the time to live settings to apply to particles generated by this particle generator.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.MinimumParticleColorChangeRate">
            <summary>
            Gets or sets the minimum rate of color change for a particle.
            </summary>
            <remarks>
            Set to 1 to diable color degeneration.
            Set to a value less than one to have particles fade out.
            Disabled by default.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.ScaleFactor">
            <summary>
            Gets or sets the value by which to divide the randomly generated scale.
            </summary>
            <remarks>
            Defaults to one. This can be used to enlarge or shrink generated particles by a constant amount.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.RandomProperties">
            <summary>
            Gets or sets a value specifying what properties to randomly generate for new particles.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator.SpriteBatch">
            <summary>
            Gets the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> used for the construction of particles.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ParticleEngine.Particle">
            <summary>
            A basic particle for the particle engine.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.Particle.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Creates a particle with the specified texture at the specified position to be drawn on the specified <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.
            </summary>
            <param name="texture">The texture of the particle.</param>
            <param name="pos">The position of the particle.</param>
            <param name="batch">The SpriteBatch on which to draw the particle.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.Particle.ReviveParticle">
            <summary>
            Revives this particle if it is dead.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.Particle.Update">
            <summary>
            Updates the particle.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.Particle.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the particle, changing the time to live.
            </summary>
            <param name="gt">The current GameTime.</param>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.Particle.ColorChange">
            <summary>
            Gets or sets the amount of the color to preserve every update.
            </summary>
            <remarks>
            Should be greater than zero. The color is multiplied by this factor every frame, so this factor can be used for color deterioration.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.Particle.RotationVelocity">
            <summary>
            Gets or sets the rotation, in degrees, by which the rotation will change each update.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.Particle.TimeToLive">
            <summary>
            Gets or sets the remaining time to live.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.Particle.IsDead">
            <summary>
            Gets a boolean indicating if this particle is dead.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ParticleEngine.Particle.TimeToLiveSettings">
            <summary>
            Gets or sets a value indicating how to apply the time to live setting.
            </summary>
        </member>
        <member name="T:Glib.XNA.NetworkLib.NetworkData">
            <summary>
            Represents network information.
            </summary>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkData.#ctor(System.String,System.Object)">
            <summary>
            Creates a new piece of network information.
            </summary>
            <param name="dataName">The name identifying the information.</param>
            <param name="data">The actual data.</param>
        </member>
        <member name="M:Glib.XNA.NetworkLib.NetworkData.#ctor(System.String,System.Object,Microsoft.Xna.Framework.Net.NetworkGamer)">
            <summary>
            Creates a new piece of network information.
            </summary>
            <param name="dataName">The name identifying the information.</param>
            <param name="data">The actual data.</param>
            <param name="sender">The sender of network information.</param>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkData.Name">
            <summary>
            Gets the name of this information.
            </summary>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkData.Data">
            <summary>
            Gets the data.
            </summary>
            <remarks>
            This will always be of type DataType.
            </remarks>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkData.Sender">
            <summary>
            Gets the sender of this information.
            </summary>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkData.DataType">
            <summary>
            Gets the type of the network data.
            </summary>
        </member>
        <member name="T:Glib.XNA.TextureFactory">
            <summary>
            A class for creating textures with specific patterns.
            </summary>
        </member>
        <member name="M:Glib.XNA.TextureFactory.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new TextureFactory with the specified GraphicsDevice.
            </summary>
            <param name="device">The GraphicsDevice this TextureFactory will use to create Texture2D objects.</param>
        </member>
        <member name="M:Glib.XNA.TextureFactory.CreateTexture(System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Color})">
            <summary>
            Creates a texture using the specified function.
            </summary>
            <param name="width">The width of the new texture.</param>
            <param name="height">The height of the new texture.</param>
            <param name="colorDetermine">The function to use for determining the color of the specified point in the texture.</param>
            <returns>A new texture with the specified colors at the specified points.</returns>
        </member>
        <member name="M:Glib.XNA.TextureFactory.CreateSquare(System.Int32)">
            <summary>
            Creates a white square of the specified size.
            </summary>
            <param name="size">The width and height of the square.</param>
            <returns>A white texture which is a square of the specified size.</returns>
        </member>
        <member name="M:Glib.XNA.TextureFactory.CreateSquare(System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a square of the specified size and color.
            </summary>
            <param name="size">The width and height of the square.</param>
            <param name="color">The color of the square.</param>
            <returns>A texture which is a square of the specified size and color.</returns>
        </member>
        <member name="M:Glib.XNA.TextureFactory.CreateRectangle(System.Int32,System.Int32)">
            <summary>
            Creates a white rectangle of the specified size.
            </summary>
            <param name="width">The width of the new rectangular texture.</param>
            <param name="height">The height of the new rectangular texture.</param>
            <returns>A white rectangular texture of the specified size.</returns>
        </member>
        <member name="M:Glib.XNA.TextureFactory.CreateRectangle(System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a rectangle of the specified size and color.
            </summary>
            <param name="width">The width of the new rectangular texture.</param>
            <param name="height">The height of the new rectangular texture.</param>
            <param name="color">The color of the new rectangular texture.</param>
            <returns>A rectangular texture of the specified size and color.</returns>
        </member>
        <member name="P:Glib.XNA.TextureFactory.Graphics">
            <summary>
            Gets the GraphicsDevice used for creating textures.
            </summary>
        </member>
        <member name="P:Glib.XNA.TextureFactory.WhitePixel">
            <summary>
            Gets a one by one texture which is a white pixel.
            </summary>
            <remarks>
            This operation is expensive, so make minimal calls to it.
            </remarks>
        </member>
        <member name="T:Glib.SupplementaryExtensions">
            <summary>
            A class providing extension methods that are present in the core library, which cannot be used on Xbox projects.
            </summary>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToInt(System.Object)">
            <summary>
            Convert the specified object to an integer.
            </summary>
            <param name="o">The object to convert to an integer.</param>
            <returns>The integer representation of the specified object.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToArrayString(System.Array)">
            <summary>
            Convert an array to a string, using space as a delimiter.
            </summary>
            <param name="array">The array to convert.</param>
            <returns>All elements of the array delimited by delimiter in a string.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToArrayString(System.Array,System.String)">
            <summary>
            Convert an array to a string.
            </summary>
            <param name="array">The array to convert.</param>
            <param name="delimiter">The delimiter between elements.</param>
            <returns>All elements of the array delimited by delimiter in a string.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.Format(System.String,System.Object[])">
            <summary>
            Format the specified string, using String.Format(String, Object[]).
            </summary>
            <param name="s">String.Format(String, Object[])'s first argument.</param>
            <param name="formatElements">The array of objects to go into String.Format(String, Object[])'s 2nd argument.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.Format(System.String,System.String@,System.Object[])">
            <summary>
            Format the specified string, using String.Format(String, Object[]), and sending the results to output.
            </summary>
            <param name="s">String.Format(String, Object[])'s first argument.</param>
            <param name="output">The string to output the results to.</param>
            <param name="formatElements">The array of objects to go into String.Format(String, Object[])'s 2nd argument.</param>
        </member>
        <member name="M:Glib.SupplementaryExtensions.RaiseToPower(System.Double,System.Double)">
            <summary>
            Raise the specified number to a power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise a number to.</param>
            <returns>The number risen to a power.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.RaiseToPower(System.Single,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.RaiseToPower(System.Int16,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.RaiseToPower(System.Int32,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.RaiseToPower(System.Decimal,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.RaiseToPower(System.Int64,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToDecimal(System.Object)">
            <summary>
            Convert the specified object into a decimal.
            </summary>
            <param name="o">The object to convert to a decimal.</param>
            <returns>The object represented as a decimal.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToShort(System.Object)">
            <summary>
            Convert the specified object to a short.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The short representation of the specified object.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToLong(System.Object)">
            <summary>
            Convert the specified object to a long.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The long representation of the specified object.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToFloat(System.Object)">
            <summary>
            Convert the specified object to a single-precision floating point number.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The object represented as a float.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToDouble(System.Object)">
            <summary>
            Convert the specified object to a double-precision floating point number.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The object represented as a double.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToBoolean(System.Object)">
            <summary>
            Convert the specified object to a boolean.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The boolean representation of the specified object.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToUnsignedShort(System.Object)">
            <summary>
            Convert the specified object to an unsigned short.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The ushort representation of the specified object.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToUnsignedInt(System.Object)">
            <summary>
            Convert the specified object to a uint.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>This object represented as a UInt32.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.ToUnsignedLong(System.Object)">
            <summary>
            Convert this object to an unsigned long.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The unsigned long representation of the specified object.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.Round(System.Single)">
            <summary>
            Round a float to the nearest whole number.
            </summary>
            <param name="f">The floating-point number to round</param>
            <returns>The number rounded to the nearest integer</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.Round(System.Double)">
            <summary>
            Round a double to the nearest whole number.
            </summary>
            <param name="d">The floating-point number to round</param>
            <returns>The number rounded to the nearest integer</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.Round(System.Decimal)">
            <summary>
            Round a decimal to the nearest whole number.
            </summary>
            <param name="d">The decimal number to round</param>
            <returns>The number rounded to the nearest integer</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.Implements(System.Type,System.Type)">
            <summary>
            Check if a type implements a given interface.
            </summary>
            <param name="cT">The type to check implementation of an interface on</param>
            <param name="t">The interface to check</param>
            <returns>Whether or not the object implements the given interface</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.Cast``1(System.Object)">
            <summary>
            Cast this object to the specified type.
            </summary>
            <typeparam name="T">The type to cast the object to.</typeparam>
            <param name="o">The object to cast.</param>
            <returns>The object casted to T.</returns>
        </member>
        <member name="M:Glib.SupplementaryExtensions.Cast``1(System.Object,``0@)">
            <summary>
            Cast this object to the specified type, and output the casted object to a variable.
            </summary>
            <typeparam name="T">The type to cast the object to.</typeparam>
            <param name="o">The object to cast.</param>
            <param name="castedObj">The object casted to T.</param>
        </member>
        <member name="T:Glib.XNA.SpriteLib.TextShadow">
            <summary>
            A shadow that shadows text.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.Shadow`1">
            <summary>
            A shadow behind an object.
            </summary>
            <typeparam name="TShadowed">The type of the shadowed object.</typeparam>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Shadow`1.#ctor(`0,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a shadow, shadowing the specified object at the specified relative position.
            </summary>
            <param name="shadowed">The shadowed object.</param>
            <param name="relativePos">The position of the shadow relative to the shadowed object.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Shadow`1.#ctor(`0)">
            <summary>
            Creates a shadow, shadowing the specified object.
            </summary>
            <param name="shadowed">The shadowed object.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Shadow`1.Draw">
            <summary>
            Renders the shadow.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Shadow`1.RelativePosition">
            <summary>
            Gets or sets the position of the shadow relative to <see cref="P:Glib.XNA.SpriteLib.Shadow`1.ShadowedObject"/>.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Shadow`1.ShadowedObject">
            <summary>
            Gets or sets the object that is shadowed.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Shadow`1.Position">
            <summary>
            Gets or sets the absolute position of the shadow.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextShadow.#ctor(Glib.XNA.SpriteLib.TextSprite,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a shadow of a <see cref="T:Glib.XNA.SpriteLib.TextSprite"/>.
            </summary>
            <param name="shadowed">The shadowed object.</param>
            <param name="relativeShadowPos">The position of the shadow relative to the <see cref="T:Glib.XNA.SpriteLib.TextSprite"/>.</param>
            <param name="shadowColor">The color of the shadow.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextShadow.#ctor(Glib.XNA.SpriteLib.TextSprite)">
            <summary>
            Creates a shadow of a <see cref="T:Glib.XNA.SpriteLib.TextSprite"/>.
            </summary>
            <param name="shadowed">The shadowed object.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextShadow.#ctor(Glib.XNA.SpriteLib.TextSprite,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a shadow of a <see cref="T:Glib.XNA.SpriteLib.TextSprite"/>.
            </summary>
            <param name="shadowed">The shadowed object.</param>
            <param name="shadowColor">The color of the shadow.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextShadow.#ctor(Glib.XNA.SpriteLib.TextSprite,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a shadow of a <see cref="T:Glib.XNA.SpriteLib.TextSprite"/>.
            </summary>
            <param name="shadowed">The shadowed object.</param>
            <param name="relativeShadowPos">The position of the shadow relative to the <see cref="T:Glib.XNA.SpriteLib.TextSprite"/>.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextShadow.Draw">
            <summary>
            Draws the shadow of the shadowed object.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextShadow.ShadowColor">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.TextBoxSprite">
            <summary>
            A Sprite which accepts Text as input.
            </summary>
            <remarks>
            Please do not forget to set the Width of this Sprite.
            </remarks>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextBoxSprite.KeyPressDelay">
            <summary>
            The delay between allowed key presses.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextBoxSprite.ResetOnSubmit">
            <summary>
            Whether or not to reset the Text of this TextBoxSprite when the text is submitted.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Create a new TextBoxSprite using a white background.
            </summary>
            <param name="pos">The position of the TextBoxSprite.</param>
            <param name="font">The SpriteFont to draw the text with.</param>
            <param name="sb">The SpriteBatch to draw to.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Create a new TextBoxSprite.
            </summary>
            <param name="texture">The texture to show beneath the text (must be scalable).</param>
            <param name="color">The color to tint the texture under the text.</param>
            <param name="pos">The position of the TextBoxSprite.</param>
            <param name="font">The SpriteFont to draw the text with.</param>
            <param name="sb">The SpriteBatch to draw to.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Create a new TextBoxSprite.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.DrawNonAuto">
            <summary>
            Draws the sprite.
            Requires you to begin the SpriteBatch before you draw the sprite, and to end the SpriteBatch after you draw the sprite.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.TextBoxSprite.IgnoredKeys">
            <summary>
            A read-only collection of all keys ignored for input.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.Update">
            <summary>
            Update this TextBoxSprite.
            This includes processing keypresses and calling events.
            </summary>
            <remarks>
            Doesn't tick elaspedKeyPressTime.
            Called internally by Update(GameTime) after incrementing elaspedKeyPressTime.
            Requires an InputManagerComponent in your game.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.TextBoxSprite.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update this TextBoxSprite, ticking the keypress delay.
            </summary>
            <param name="gt">The current GameTime, passed to the Game.</param>
        </member>
        <member name="E:Glib.XNA.SpriteLib.TextBoxSprite.Moved">
            <summary>
            An EventHandler called after the successful movement of this TextBoxSprite.
            </summary>
            <remarks>
            The superclass implementation is hidden to prevent removal of internally used event handlers.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.TextColor">
            <summary>
            The color of the text.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.Text">
            <summary>
            The displayed text of the underlying TextSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.RealText">
            <summary>
            The full text typed into this TextBoxSprite.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.IsPassword">
            <summary>
            Whether or not this is a password text field.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.Focused">
            <summary>
            Whether or not this TextBoxSprite is focused.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.TextBoxSprite.TextSubmitted">
            <summary>
            An event fired when text is submitted from this TextBoxSprite.
            </summary>
            <remarks>
            The text is not cleared until after the event is called, so you can use the Text property of the source to get the text submitted.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.UseCenterAsOrigin">
            <summary>
            Use the center as the origin.
            Always false for this Sprite implementation.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.TextBoxSprite.PasswordCharacter">
            <summary>
            The character to display for passwords.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleProperties">
            <summary>
            A structure specifying what properties to randomly generate for a particle generated by a <see cref="T:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleGenerator"/>.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleProperties.GetHashCode">
            <summary>
            Calculates a hash code for this object.
            </summary>
            <returns>The hash code for this instance of <see cref="T:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleProperties"/>.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleProperties.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>Whether the specified object is equal to this instance of <see cref="T:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleProperties"/>.</returns>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleProperties.Speed">
            <summary>
            The speed to use for new particles, or null for a random value.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleProperties.Tint">
            <summary>
            The tint to use for new particles, or null for a random value.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleProperties.Scale">
            <summary>
            The scale to use for new particles, or null for a random value.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleProperties.TimeToLive">
            <summary>
            The TTL to use for new particles, or null for a random value.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleProperties.ColorFactor">
            <summary>
            The color multiplier to use for new particles, or null for a random value.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ParticleEngine.RandomParticleProperties.RotationChange">
            <summary>
            The rotation change (in degrees) to use for new particles, or null for a random value.
            </summary>
        </member>
        <member name="T:Glib.XNA.NetworkLib.NetworkSessionsFoundEventArgs">
            <summary>
            Represents event arguments for the SessionsFound event.
            </summary>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkSessionsFoundEventArgs.SessionToJoin">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Xna.Framework.Net.AvailableNetworkSession"/> to join, from the <see cref="P:Glib.XNA.NetworkLib.NetworkSessionsFoundEventArgs.AvailableSessions"/> collection.
            </summary>
            <remarks>
            This property does not have to be set.
            </remarks>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkSessionsFoundEventArgs.AvailableSessions">
            <summary>
            Gets the <see cref="T:Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection"/> of available sessions found.
            </summary>
            <remarks>
            This will be null if an error occurred during the asynchronous operation.
            </remarks>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkSessionsFoundEventArgs.Error">
            <summary>
            Gets the error that occurred during the session retrieval, if any.
            </summary>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkSessionsFoundEventArgs.SessionsFound">
            <summary>
            Gets a boolean indicating whether any <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/>s were found.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.SpriteManager">
            <summary>
            Manages multiple <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> objects on the same SpriteBatch.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.AddNewSprite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Add a new <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> with the specified position and texture, and returns it.
            </summary>
            <param name="position">The position of the new <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>.</param>
            <param name="texture">The texture of the new <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>.</param>
            <returns>The created Sprite.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.RemoveSelf(Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Remove a <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> from this SpriteManager.
            Safe to call during Update or Draw (or from their corresponding events).
            </summary>
            <param name="spr">The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> to remove.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Add(Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Add a <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> to this SpriteManager.
            </summary>
            <param name="spr">The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> to add.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Remove(Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Remove a given <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>, that is NOT the <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> being updated.
            </summary>
            <param name="spr">The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> to remove.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Glib.XNA.SpriteLib.Sprite[])">
            <summary>
            Construct a new SpriteManager.
            </summary>
            <param name="sb">The SpriteBatch to use.</param>
            <param name="sprites">The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s to add to the SpriteManager.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Draw">
            <summary>
            Draw all <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s managed by this SpriteManager.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.DrawNonAuto">
            <summary>
            Draw all <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s managed by this SpriteManager, without opening or closing the SpriteBatch.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Update">
            <summary>
            Update all <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s managed by this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
            <remarks>
            Does not call Update(GameTime) on subclasses of Sprite implementing ITimerSprite.
            The MouseState for click checking is InputLib.Mouse.MouseManager.CurrentMouseState.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update all <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s managed by this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>, calling Update(GameTime) on ITimerSprites where neccesary.
            </summary>
            <remarks>
            Uses InputLib.Mouse.MouseManager.CurrentMouseState.
            </remarks>
            <param name="gameTime">The current game time.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Clear">
            <summary>
            Removes all Sprites from this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Contains(Glib.XNA.SpriteLib.Sprite)">
            <summary>
            Determines whether the specified <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> is in this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
            <param name="item">The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> to locate in this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.</param>
            <returns>Whether or not this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/> contains the specified <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.CopyTo(Glib.XNA.SpriteLib.Sprite[],System.Int32)">
            <summary>
            Copies the entire <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/> into the specified array, beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional array of <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s to copy into.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
            <returns>An enumerator that iterates through this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
            <returns>An enumerator that iterates through this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.SpriteManager.Dispose">
            <summary>
            Disposes of owned <see cref="T:Glib.XNA.SpriteLib.Sprite"/>s.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteManager.SpriteBatch">
            <summary>
            Gets the <seealso cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> drawn to.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteManager.Item(System.Int32)">
            <summary>
            Get or set the <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> with the specified index in the Sprites list.
            </summary>
            <remarks>
            Returns null if the index is out of bounds of the array, instead of throwing an exception.
            </remarks>
            <param name="index">The index in the Sprites list.</param>
            <returns>The <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/> with the specified index in the Sprites list.</returns>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteManager.Count">
            <summary>
            Gets the number of <seealso cref="T:Glib.XNA.SpriteLib.Sprite"/>s in this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.SpriteManager.IsReadOnly">
            <summary>
            Gets a value indicating whether or not this <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/> is read-only.
            </summary>
            <remarks>
            For a <seealso cref="T:Glib.XNA.SpriteLib.SpriteManager"/>, this value is always false.
            </remarks>
        </member>
        <member name="T:Glib.XNA.SpriteLib.PositionRepresentation">
            <summary>
            A basic class that represents a position. Intented to be used when an IPositionable is needed but you only have a Vector2.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.PositionRepresentation.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Create a new PositionRepresentation.
            </summary>
            <param name="pos">The position to represent.</param>
        </member>
        <member name="P:Glib.XNA.SpriteLib.PositionRepresentation.X">
            <summary>
            Gets or sets the X position of the Position object.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.PositionRepresentation.Y">
            <summary>
            Gets or sets the Y position of the Position object.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.PositionRepresentation.Position">
            <summary>
            Gets or sets the underlying position.
            </summary>
        </member>
        <member name="T:Glib.XNA.ScreenGame">
            <summary>
            A game that uses the <see cref="T:Glib.XNA.SpriteLib.ScreenManager"/> class.
            </summary>
        </member>
        <member name="F:Glib.XNA.ScreenGame.Graphics">
            <summary>
            The GraphicsDeviceManager of this game.
            </summary>
        </member>
        <member name="M:Glib.XNA.ScreenGame.Initialize">
            <summary>
            Initializes the game, adding an InputManagerComponent.
            </summary>
        </member>
        <member name="M:Glib.XNA.ScreenGame.InitializeScreens">
            <summary>
            Initializes all of the Screens of the game.
            </summary>
            <remarks>
            Called immediately after the initialization of the <see cref="T:Glib.XNA.SpriteLib.ScreenManager"/>, in <seealso cref="M:Glib.XNA.ScreenGame.LoadContent"/>.
            </remarks>
        </member>
        <member name="M:Glib.XNA.ScreenGame.LoadContent">
            <summary>
            Loads game assets, and initializes the SpriteBatch.
            </summary>
        </member>
        <member name="M:Glib.XNA.ScreenGame.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the visible Screens on this Game.
            </summary>
            <param name="gameTime">The current GameTime.</param>
        </member>
        <member name="M:Glib.XNA.ScreenGame.BeginDraw">
            <summary>
            Begins drawing the frame.
            </summary>
            <returns>Whether or not to draw the frame.</returns>
        </member>
        <member name="M:Glib.XNA.ScreenGame.EndDraw">
            <summary>
            Ends drawing of the frame.
            </summary>
        </member>
        <member name="M:Glib.XNA.ScreenGame.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:Glib.XNA.ScreenGame.#ctor">
            <summary>
            Initializes the Game.
            </summary>
        </member>
        <member name="P:Glib.XNA.ScreenGame.ContentRootDirectory">
            <summary>
            Gets or sets the root directory for loading ContentManager assets.
            </summary>
            <remarks>
            Defaults to "Content".
            </remarks>
        </member>
        <member name="P:Glib.XNA.ScreenGame.BackgroundColor">
            <summary>
            Gets the background color of this Game.
            </summary>
        </member>
        <member name="P:Glib.XNA.ScreenGame.Height">
            <summary>
            Gets or sets the desired height of the Game.
            </summary>
        </member>
        <member name="P:Glib.XNA.ScreenGame.Width">
            <summary>
            Gets or sets the desired width of the Game.
            </summary>
        </member>
        <member name="P:Glib.XNA.ScreenGame.SpriteBatch">
            <summary>
            Gets the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> that is drawn to.
            </summary>
        </member>
        <member name="P:Glib.XNA.ScreenGame.AllScreens">
            <summary>
            Gets the collection of all existing <see cref="T:Glib.XNA.SpriteLib.Screen"/>s.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.Screen">
            <summary>
            Represents a RenderTarget2D which is a screen.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.Sprites">
            <summary>
            All the Sprites to draw to this Screen.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.CenterToViewport(Microsoft.Xna.Framework.Graphics.Viewport)">
            <summary>
            Center the position of this Screen relative to the position of the specified Viewport.
            </summary>
            <param name="v">The viewport to center to.</param>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.ClearColor">
            <summary>
            The color to clear this screen as.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.TintColor">
            <summary>
            The color to tint this screen as.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.Target">
            <summary>
            The target to render things to.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.Graphics">
            <summary>
            The graphics device to draw to.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.#ctor(Microsoft.Xna.Framework.Graphics.RenderTarget2D,Microsoft.Xna.Framework.Color,Glib.XNA.SpriteLib.SpriteManager)">
            <summary>
            Create a new screen.
            </summary>
            <param name="target">The render target to draw to.</param>
            <param name="color">The color to clear this Screen as before drawing.</param>
            <param name="allSprites">The SpriteManager containing the Sprites to draw.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.#ctor(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,Glib.XNA.SpriteLib.SpriteManager)">
            <summary>
            Create a new screen.
            </summary>
            <param name="sizeOfTarget">The size and position of the RenderTarget.</param>
            <param name="color">The color to clear this Screen as before drawing.</param>
            <param name="allSprites">The SpriteManager containing the Sprites to draw.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Color)">
            <summary>
            Create a new Screen with no Sprites by default.
            </summary>
            <param name="sb">The SpriteBatch to draw.</param>
            <param name="c">The color of the Screen.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Create a new Screen with a background image.
            </summary>
            <param name="sb">The SpriteBatch to draw.</param>
            <param name="c">The color of the Screen.</param>
            <param name="back">The background image of the Screen.</param>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Screen.BackgroundSprite">
            <summary>
            If set, the ISprite to use as the background.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.#ctor(Glib.XNA.SpriteLib.SpriteManager,Microsoft.Xna.Framework.Color)">
            <summary>
            Create a new screen.
            </summary>
            <param name="color">The color to clear the Screen as before Sprite drawing.</param>
            <param name="mgr">The SpriteManager managing a SpriteBatch with a viewport to use as the Screen size.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.Update">
            <summary>
            Update all Sprites on this Screen.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.MiscellaneousProcessing">
            <summary>
            If overriden in a subclass, performs miscellaneous processing logic while the RenderTarget2D is the active RenderTarget.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.OpenSpriteBatch(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Open the specified SpriteBatch with the settings required for drawing this Screen.
            </summary>
            <param name="sb">The SpriteBatch to open.</param>
            <remarks>
            When overriding this method, do not call the superclass implementation of this method.
            </remarks>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update all Sprites on this Screen.
            </summary>
            <param name="game">The active game time.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.Screen.Dispose">
            <summary>
            Disposes of all <see cref="F:Glib.XNA.SpriteLib.Screen.Sprites"/> (and other assorted managed assets) owned by this <see cref="T:Glib.XNA.SpriteLib.Screen"/>.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.LayerDepth">
            <summary>
            Gets or sets the layer depth at which to render the <see cref="T:Glib.XNA.SpriteLib.Screen"/>.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.Visible">
            <summary>
            Gets or sets a boolean representing whether or not this Screen is visible.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.SpriteCount">
            <summary>
            Gets the total count of ISprites in this Screen.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.CenterOrigin">
            <summary>
            Gets or sets a value indicating whether or not to use the center of the Screen as the origin when drawing.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.AdditionalSprites">
            <summary>
            Gets a collection of any non-Sprite deriving drawables that need to be drawn to this Screen.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.Width">
            <summary>
            Gets the width of this Screen, in pixels.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.Height">
            <summary>
            Gets the height of this Screen, in pixels.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.Name">
            <summary>
            Gets or sets the name of the Screen.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.Screen.Position">
            <summary>
            Gets or sets the position of the Screen relative to the display.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ScreenManager">
            <summary>
            Represents a set of Screens to manage.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ScreenManager._allScreens">
            <summary>
            All the Screen objects managed by this ScreenManager.
            </summary>
            <remarks>
            The component that is called by all implemented IEnumerable and ICollection methods.
            </remarks>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ScreenManager.Graphics">
            <summary>
            The graphics device to draw to.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ScreenManager.SpriteBatch">
            <summary>
            The SpriteBatch to draw to.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ScreenManager.Background">
            <summary>
            The main background color.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Color,Glib.XNA.SpriteLib.Screen[])">
            <summary>
            Create a ScreenManager.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Update(System.Boolean)">
            <summary>
            Update all the Screen's sprites.
            </summary>
            <param name="updateInvisible">Whether or not to update invisible screens.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update all the Screen's sprites.
            </summary>
            <param name="gt">The active GameTime.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Update(System.Boolean,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update all the Screen's sprites.
            </summary>
            <param name="updateInvisible">Whether or not to update invisible screens.</param>
            <param name="gt">The active GameTime.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Update">
            <summary>
            Update all the Screen's sprites.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.BeginDraw">
            <summary>
            Prepares to draw all the Screens.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Draw">
            <summary>
            Draws all the visible screens.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.EndDraw">
            <summary>
            Ends drawing of all Screens.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Add(Glib.XNA.SpriteLib.Screen)">
            <summary>
            Add the specified Screen to this ScreenManager.
            </summary>
            <param name="item">The screen to add.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Clear">
            <summary>
            Clear this ScreenManager of all Screens.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Contains(Glib.XNA.SpriteLib.Screen)">
            <summary>
            Check if this ScreenManager contains the specified Screen.
            </summary>
            <param name="item">The item to check.</param>
            <returns>Whether or not this ScreenManager contains item.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.CopyTo(Glib.XNA.SpriteLib.Screen[],System.Int32)">
            <summary>
            Copies the entire collection of Screens to the specified array starting at the specified index.
            </summary>
            <param name="array">The array to copy items to.</param>
            <param name="arrayIndex">The index to begin putting items.</param>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.Remove(Glib.XNA.SpriteLib.Screen)">
            <summary>
            Remove the specified Screen from this ScreenManager.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Whether or not the item was removed.</returns>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ScreenManager.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ScreenManager.
            </summary>
            <returns>An enumerator that iterates through the ScreenManager.</returns>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ScreenManager.Item(System.Int32)">
            <summary>
            Gets the Screen at the specified index.
            </summary>
            <param name="index">The index in the AllScreens list.</param>
            <returns>The screen with the specified index.</returns>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ScreenManager.Item(System.String)">
            <summary>
            Gets the Screen with the specified name.
            </summary>
            <param name="name">The name of the screen.</param>
            <exception cref="T:System.InvalidOperationException">If multiple Screens with the specified name exist.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If no Screens with the specified name exist.</exception>
            <returns>The screen with the specified name.</returns>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ScreenManager.Count">
            <summary>
            Gets the number of Screens this ScreenManager is managing.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ScreenManager.IsReadOnly">
            <summary>
            Gets a value representing whether or not this collection is read only.
            </summary>
        </member>
        <member name="T:Glib.XNA.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.XNA"/> namespace provides various XNA utilities and classes.
            </summary>
        </member>
        <member name="T:Glib.XNA.EnumExtensions">
            <summary>
            A class that provides Xbox extensions on enums.
            </summary>
        </member>
        <member name="M:Glib.XNA.EnumExtensions.HasFlag(System.Enum,System.Enum)">
            <summary>
            Test whether an enum has a flag.
            </summary>
            <param name="enumVal">The enum to test.</param>
            <param name="flag">The flag to check for.</param>
            <returns>Whether enumVal has flag.</returns>
            <remarks>
            Only works with unsigned underlying numerical types.
            </remarks>
        </member>
        <member name="T:Glib.XNA.NetworkLib.NetworkSessionJoinedEventArgs">
            <summary>
            Represents event arguments for the SessionJoined event.
            </summary>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkSessionJoinedEventArgs.Joined">
            <summary>
            Gets the <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/> that was joined.
            </summary>
            <remarks>
            This will be null if an error occurred during the asynchronous operation.
            </remarks>
        </member>
        <member name="P:Glib.XNA.NetworkLib.NetworkSessionJoinedEventArgs.Error">
            <summary>
            Gets the error that occurred during the session joining, if any.
            </summary>
        </member>
        <member name="T:Glib.XNA.NetworkLib.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.XNA.NetworkLib"/> namespace provides various XNA networking utilities.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.ProgressBar">
            <summary>
            Represents a progress bar.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ProgressBar.syncLock">
            <summary>
            The object for locking when modifying variables relating to the value of the <see cref="T:Glib.XNA.SpriteLib.ProgressBar"/>. The provided properties use this object by default.
            </summary>
        </member>
        <member name="M:Glib.XNA.SpriteLib.ProgressBar.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Create a new ProgressBar.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.ProgressBar._textureNeedsCalculation">
            <summary>
            A boolean indicating whether the texture needs to be recalculated.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.Denominator">
            <summary>
            Gets or sets the highest possible value (denominator) of the progress bar.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.HeightScale">
            <summary>
            Gets or sets the scaling of height to perform to this object.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.WidthScale">
            <summary>
            Gets or sets the scaling of width to perform to this object.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.Percentage">
            <summary>
            Gets the percentage (not fraction) of the progress bar that is complete.
            </summary>
            <remarks>
            Returns a value from 0 to 100.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.Value">
            <summary>
            Gets or sets the numerator (value) of the progress bar.
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.FillColor">
            <summary>
            Gets or sets the color to show for portions of the progress bar that are full.
            </summary>
        </member>
        <member name="E:Glib.XNA.SpriteLib.ProgressBar.ProgressBarFilled">
            <summary>
            An event fired when the progress bar is filled (value is set to denominator).
            </summary>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.Texture">
            <summary>
            Gets or sets a representation of the texture to use for the progress bar.
            </summary>
            <remarks>
            Setting this texture will result in (slow) image processing to create data.
            It does not assume the same color scheme, but it does assume the same scale.
            If the bar is one color, the program will parse it as 0% unless the color is the FillColor of this ProgressBar.
            If the color scheme is inverted in the texture you are setting this ProgressBar to, you should be aware of this.
            Parsing any non-null texture will not result in a change to <see cref="P:Glib.XNA.SpriteLib.ProgressBar.FillColor"/> and <see cref="P:Glib.XNA.SpriteLib.ProgressBar.EmptyColor"/>, but will instead set the appropriate values and cause a change in the values of this progress bar.
            </remarks>
        </member>
        <member name="P:Glib.XNA.SpriteLib.ProgressBar.EmptyColor">
            <summary>
            Gets or sets the color to show for portions of the progress bar that are empty.
            </summary>
        </member>
        <member name="T:Glib.XNA.NetworkLib.SessionManagerComponent">
            <summary>
            A game component that manages a <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/>.
            </summary>
            <remarks>
            This class provides utility methods for the joining of existing <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/>s. Creation of <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/> objects must be done using the <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/> class itself.
            </remarks>
        </member>
        <member name="M:Glib.XNA.NetworkLib.SessionManagerComponent.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Creates a <see cref="T:Glib.XNA.NetworkLib.SessionManagerComponent"/> for the specified <see cref="T:Microsoft.Xna.Framework.Game"/>.
            </summary>
            <param name="game">The <see cref="T:Microsoft.Xna.Framework.Game"/> that this component will be added to.</param>
        </member>
        <member name="M:Glib.XNA.NetworkLib.SessionManagerComponent.FindSessions(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties)">
            <summary>
            Begins the process of asynchronously finding <see cref="T:Microsoft.Xna.Framework.Net.AvailableNetworkSession"/>s.
            </summary>
            <param name="type">The type of the <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/> to find.</param>
            <param name="gamers">The maximum number of local gamers to allow within the <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/>.</param>
            <param name="reqProps">The <see cref="T:Microsoft.Xna.Framework.Net.NetworkSessionProperties"/> that must be present on the found <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/>, or null if none.</param>
        </member>
        <member name="M:Glib.XNA.NetworkLib.SessionManagerComponent.JoinSession(Microsoft.Xna.Framework.Net.AvailableNetworkSession)">
            <summary>
            Begins to asynchronously join the specified <see cref="T:Microsoft.Xna.Framework.Net.AvailableNetworkSession"/>.
            </summary>
            <param name="toJoin">The session to join.</param>
        </member>
        <member name="M:Glib.XNA.NetworkLib.SessionManagerComponent.JoinSession(Microsoft.Xna.Framework.Net.NetworkSession)">
            <summary>
            Join the specified <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/>.
            </summary>
            <param name="session">The session to join.</param>
        </member>
        <member name="M:Glib.XNA.NetworkLib.SessionManagerComponent.LeaveSession">
            <summary>
            Leave the current network session.
            </summary>
        </member>
        <member name="M:Glib.XNA.NetworkLib.SessionManagerComponent.FindSessions(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32)">
            <summary>
            Begins the process of asynchronously finding <see cref="T:Microsoft.Xna.Framework.Net.AvailableNetworkSession"/>s.
            </summary>
            <param name="type">The type of the <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/> to find.</param>
            <param name="gamers">The maximum number of local gamers to allow within the <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/>.</param>
        </member>
        <member name="M:Glib.XNA.NetworkLib.SessionManagerComponent.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the <see cref="T:Glib.XNA.NetworkLib.SessionManagerComponent"/>.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="P:Glib.XNA.NetworkLib.SessionManagerComponent.InSession">
            <summary>
            Gets a boolean indicating whether we are in an active network session.
            </summary>
        </member>
        <member name="P:Glib.XNA.NetworkLib.SessionManagerComponent.Session">
            <summary>
            Gets the <see cref="T:Microsoft.Xna.Framework.Net.NetworkSession"/> that this <see cref="T:Glib.XNA.NetworkLib.SessionManagerComponent"/> is managing.
            </summary>
        </member>
        <member name="E:Glib.XNA.NetworkLib.SessionManagerComponent.SessionJoined">
            <summary>
            An event fired after a network session has been asynchronously joined.
            </summary>
        </member>
        <member name="E:Glib.XNA.NetworkLib.SessionManagerComponent.SessionsFound">
            <summary>
            An event fired after network sessions have been asynchronously found.
            </summary>
        </member>
        <member name="E:Glib.XNA.NetworkLib.SessionManagerComponent.SessionEnded">
            <summary>
            An event fired when the session has ended.
            </summary>
            <remarks>
            This event will throw an exception if the <see cref="P:Glib.XNA.NetworkLib.SessionManagerComponent.Session"/> property is null.
            </remarks>
        </member>
        <member name="T:Glib.XNA.InputLib.KeyboardManager">
            <summary>
            A static class calling keyboard related events when updated.
            </summary>
        </member>
        <member name="F:Glib.XNA.InputLib.KeyboardManager._lastState">
            <summary>
            The last known state of the keyboard.
            </summary>
        </member>
        <member name="M:Glib.XNA.InputLib.KeyboardManager.Update">
            <summary>
            Update the KeyboardManager, calling the appropriate events.
            </summary>
        </member>
        <member name="P:Glib.XNA.InputLib.KeyboardManager.State">
            <summary>
            Gets the last known state of the keyboard.
            </summary>
            <remarks>
            Current when accessed after Update().
            </remarks>
        </member>
        <member name="E:Glib.XNA.InputLib.KeyboardManager.KeyDown">
            <summary>
            An event called when a new key is pressed down.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.KeyboardManager.KeyUp">
            <summary>
            An event called when a key is lifted.
            </summary>
        </member>
        <member name="E:Glib.XNA.InputLib.KeyboardManager.KeyPressed">
            <summary>
            An event called when a key is pressed and released.
            </summary>
        </member>
        <member name="T:Glib.XNA.SpriteLib.Direction">
            <summary>
            An enum representing a direction.
            Can also represent the edge of a viewport.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Direction.Top">
            <summary>
            An edge representing the top of a viewport.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Direction.Bottom">
            <summary>
            An edge representing the bottom of a viewport.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Direction.Left">
            <summary>
            An edge representing the left side of a viewport.
            </summary>
        </member>
        <member name="F:Glib.XNA.SpriteLib.Direction.Right">
            <summary>
            An edge representing the right side of a viewport.
            </summary>
        </member>
    </members>
</doc>
