<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GlenLibrary</name>
    </assembly>
    <members>
        <member name="T:Glib.WinForms.Shapes.XShape">
            <summary>
            A figure which is an X.
            </summary>
        </member>
        <member name="T:Glib.WinForms.Shapes.Shape">
            <summary>
            A basic shape.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Shapes.Shape.#ctor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Create a new shape.
            </summary>
            <param name="x">The X position of the shape.</param>
            <param name="y">The Y position of the shape.</param>
            <param name="color">The color of the shape.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Shape.Draw(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Draw the shape to the specified graphics object with the default color.
            </summary>
            <param name="gfx">The graphics device to draw to.</param>
            <param name="fill">Whether or not to fill the shape.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Shape.Draw(System.Drawing.Graphics,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw the shape to the specified graphics object.
            </summary>
            <param name="gfx">The graphics device to draw to.</param>
            <param name="color">The color to draw the shape.</param>
            <param name="fill">Whether or not to fill the shape.</param>
        </member>
        <member name="P:Glib.WinForms.Shapes.Shape.Color">
            <summary>
            The color of the shape.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.Shape.X">
            <summary>
            The X position of the shape.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.Shape.Position">
            <summary>
            Gets or sets the position of the shape.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.Shape.Y">
            <summary>
            The Y position of the shape.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Shapes.XShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Create a new X shape.
            </summary>
            <param name="x">The first X position.</param>
            <param name="y">The first Y position.</param>
            <param name="x1">The second X position.</param>
            <param name="y1">The second Y position.</param>
            <param name="distanceBetweenX">The distance between the top two points of the X shape.</param>
            <param name="color">The color of the X.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.XShape.Draw(System.Drawing.Graphics,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw the X to the specified graphics.
            </summary>
            <param name="gfx">The graphics to draw the X to.</param>
            <param name="color">The color to draw the X with.</param>
            <param name="fill">(Ignored parameter, cannot fill an X)</param>
        </member>
        <member name="P:Glib.WinForms.Shapes.XShape.XDistance">
            <summary>
            The distance between the top two corners of the X (along the X axis).
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.XShape.X1">
            <summary>
            The second X coordinate of the X.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.XShape.Position">
            <summary>
            Gets the X, Y, X1, and Y1 positions of the XShape.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.XShape.Y1">
            <summary>
            The second Y coordinate of the X.
            </summary>
        </member>
        <member name="T:Glib.WinForms.FormValidator">
            <summary>
            A class validating forms to ensure all <see cref="T:Glib.WinForms.IRequiredField"/>s are complete.
            </summary>
        </member>
        <member name="M:Glib.WinForms.FormValidator.#ctor(System.Windows.Forms.Form)">
            <summary>
            Create a new FormValidator validating the specified form.
            </summary>
            <param name="formToValidate">The form which contains components to validate.</param>
        </member>
        <member name="M:Glib.WinForms.FormValidator.#ctor(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Create a new FormValidator validating the specified controls.
            </summary>
            <param name="comToValidate">Components to validate.</param>
        </member>
        <member name="M:Glib.WinForms.FormValidator.AddFormComponents(System.Windows.Forms.Form)">
            <summary>
            Add the components of the specified form to be validated.
            </summary>
            <param name="formToAdd">The form which contains components to validate.</param>
        </member>
        <member name="M:Glib.WinForms.FormValidator.ValidateForm(System.Windows.Forms.ErrorProvider)">
            <summary>
            Validate these controls for errors, marking the controls with errors as errored using the specified ErrorProvider.
            </summary>
            <param name="errors">The ErrorProvider to use for erroring out controls.</param>
            <returns>Whether or not the form is complete.</returns>
        </member>
        <member name="M:Glib.WinForms.FormValidator.ValidateForm(System.Windows.Forms.Form)">
            <summary>
            Validate the controls on the specified form.
            </summary>
            <param name="testForm">The form to validate.</param>
            <returns>Whether or not the form has all valid controls.</returns>
        </member>
        <member name="P:Glib.WinForms.FormValidator.ControlsToValidate">
            <summary>
            Gets the collection of controls to validate.
            </summary>
        </member>
        <member name="P:Glib.WinForms.FormValidator.IsComplete">
            <summary>
            Gets a boolean representing whether or not all required controls are completed.
            </summary>
        </member>
        <member name="T:Glib.WinForms.Shapes.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.WinForms.Shapes"/> namespace provides various shapes that can be drawn to a Windows Forms <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
        </member>
        <member name="T:Glib.Services.Service">
            <summary>
            An abstract service class representing repeatedly executing code.
            </summary>
        </member>
        <member name="M:Glib.Services.Service.#ctor">
            <summary>
            Create a new service.
            </summary>
        </member>
        <member name="M:Glib.Services.Service.Main">
            <summary>
            The main service code, that runs repeatedly every tick of ServiceTimer.
            </summary>
        </member>
        <member name="F:Glib.Services.Service.ServiceTimer">
            <summary>
            The underlying timer that is ticking the service.
            </summary>
        </member>
        <member name="M:Glib.Services.Service.OnStart(System.String[])">
            <summary>
            Start the service timer.
            </summary>
            <param name="args">Data passed by the start command.</param>
        </member>
        <member name="M:Glib.Services.Service.OnStop">
            <summary>
            Stop the service timer.
            </summary>
        </member>
        <member name="P:Glib.Services.Service.delay">
            <summary>
            The delay, in milliseconds, between executions of the service code.
            </summary>
        </member>
        <member name="P:Glib.Services.Service.IsPrivileged">
            <summary>
            A boolean representing whether or not this service needs administrator-level permissions on the local system.
            </summary>
        </member>
        <member name="P:Glib.Services.Service.Delay">
            <summary>
            The delay, in milliseconds, between executions of the service code.
            </summary>
        </member>
        <member name="T:Glib.Exceptions.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.Exceptions"/> namespace provides various exception classes that are not provided by the .NET framework.
            </summary>
        </member>
        <member name="T:Glib.WinForms.Controls.SqlParameterTextBox">
            <summary>
            A SQL parameter provider in the form of a text box.
            </summary>
        </member>
        <member name="T:Glib.SQL.ISQLParameterProvider">
            <summary>
            An interface representing a provider of SQL parameter information.
            </summary>
        </member>
        <member name="P:Glib.SQL.ISQLParameterProvider.ParameterName">
            <summary>
            Gets the name of the provided parameter.
            </summary>
        </member>
        <member name="P:Glib.SQL.ISQLParameterProvider.ParameterValue">
            <summary>
            Gets the value of the provided parameter.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Controls.SqlParameterTextBox.#ctor(System.String)">
            <summary>
            Create a new SqlParameterTextBox with the specified parameter name.
            </summary>
            <param name="parameterName">The name of the SQL parameter.</param>
        </member>
        <member name="P:Glib.WinForms.Controls.SqlParameterTextBox.ParameterName">
            <summary>
            Gets the name of the represented SQL parameter.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Controls.SqlParameterTextBox.ParameterValue">
            <summary>
            Gets or sets the string value of the text box, which is the value of the SQL parameter.
            </summary>
        </member>
        <member name="T:Glib.WinForms.Shapes.Triangle">
            <summary>
            A triangle shape in windows forms.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Shapes.Triangle.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Color)">
            <summary>
            Create a new triangle.
            </summary>
            <param name="posA">Point A of the triangle.</param>
            <param name="posB">Point B of the triangle.</param>
            <param name="posC">Point C of the triangle.</param>
            <param name="color">The color of the shape.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Triangle.Draw(System.Drawing.Graphics,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw the triangle to the specified graphics object.
            </summary>
            <param name="gfx">The graphics device to draw to.</param>
            <param name="color">The color to draw the shape.</param>
            <param name="fill">Whether or not to fill the shape.</param>
        </member>
        <member name="P:Glib.WinForms.Shapes.Triangle.PositionB">
            <summary>
            The upper corner of the triangle.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.Triangle.PositionC">
            <summary>
            The right hand corner of the triangle.
            </summary>
        </member>
        <member name="T:Glib.TypeUtils`1">
            <summary>
            A static class providing convenience utilities on types.
            </summary>
            <typeparam name="T">The type to provide utilities of.</typeparam>
        </member>
        <member name="P:Glib.TypeUtils`1.TruePredicate">
            <summary>
            Gets a predicate that will always return a true value.
            </summary>
        </member>
        <member name="P:Glib.TypeUtils`1.IsNumeric">
            <summary>
            Gets a value indicating whether the specified type is numeric.
            </summary>
        </member>
        <member name="P:Glib.TypeUtils`1.FalsePredicate">
            <summary>
            Gets a predicate that will always return a false value.
            </summary>
        </member>
        <member name="T:Glib.Utils">
            <summary>
            A static class providing convenience utilities.
            </summary>
        </member>
        <member name="P:Glib.Utils.NumericTypes">
            <summary>
            Gets an array of numerical types.
            </summary>
        </member>
        <member name="T:Glib.SQL.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.SQL"/> namespace provides various SQL tools.
            </summary>
        </member>
        <member name="T:Glib.SQL.SqlExtensions">
            <summary>
            Various SQL-related extensions.
            </summary>
        </member>
        <member name="M:Glib.SQL.SqlExtensions.IsNull(System.Object)">
            <summary>
            Check if the specified object is either null or DBNull.
            </summary>
            <param name="nullCheck">The object to check against null and DBNull.</param>
            <returns>Whether or not the specified object is null or DBNull.</returns>
        </member>
        <member name="M:Glib.SQL.SqlExtensions.OpenIfNeeded(System.Data.SqlClient.SqlConnection)">
            <summary>
            Open the specified SqlConnection if it is not opened already.
            </summary>
            <param name="conn">The connection to open.</param>
        </member>
        <member name="M:Glib.SQL.SqlExtensions.GetParameter(Glib.SQL.ISQLParameterProvider)">
            <summary>
            Get the SQL parameter represented by the specified ISQLParameterProvider.
            </summary>
            <param name="provider">The ISQLParameterProvider to get the parameter data from.</param>
            <returns>A SqlParameter representing the information stored by the ISQLParameterProvider.</returns>
        </member>
        <member name="T:Glib.SQL.StoredProcedure">
            <summary>
            A class representing a SQL stored procedure.
            </summary>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.AddParameter(System.String,System.Object)">
            <summary>
            Add a SqlParameter with the specified name and value to the collection of parameters.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.AddParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add the specified SqlParameters to the parameters of the underlying command.
            </summary>
            <param name="parameters">The parameters to add.</param>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.RemoveParameter(System.String)">
            <summary>
            Remove the SqlParameter with the specified name.
            </summary>
            <param name="name">The name of the SqlParameter to remove.</param>
            <returns>Whether or not the command was successfully removed.</returns>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.#ctor(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Create a new StoredProcedure.
            </summary>
            <param name="connection">The SqlConnection used to connect to the database.</param>
            <param name="procName">The name of the stored procedure to execute.</param>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.#ctor(System.String,System.String)">
            <summary>
            Create a new StoredProcedure.
            </summary>
            <param name="connectionString">The connecting string used to connect to the database.</param>
            <param name="procName">The name of the stored procedure to execute.</param>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.Finalize">
            <summary>
            A destructor closing all known open SqlDataReaders associated with this command.
            </summary>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.ExecuteDataReader">
            <summary>
            Execute this StoredProcedure, and return the results as a SqlDataReader.
            </summary>
            <remarks>
            Must be closed after use.
            </remarks>
            <returns>A SqlDataReader representing the results of this command.</returns>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.ExecuteScalar">
            <summary>
            Executes this StoredProcedure, and return the results as a scalar value (int).
            </summary>
            <returns>The results of this command as a scalar value (int).</returns>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.Execute">
            <summary>
            Executes this StoredProcedure, and return the number of rows affected.
            </summary>
            <returns>The number of rows affected by this command.</returns>
        </member>
        <member name="M:Glib.SQL.StoredProcedure.ExecuteDataTable">
            <summary>
            Execute this StoredProcedure, and return the results as a DataTable.
            </summary>
            <returns>A DataTable representing the results of this command.</returns>
        </member>
        <member name="P:Glib.SQL.StoredProcedure.Connection">
            <summary>
            The SqlConnection used to connect to the database.
            </summary>
        </member>
        <member name="P:Glib.SQL.StoredProcedure.Parameters">
            <summary>
            Get the collection of <seealso cref="T:System.Data.SqlClient.SqlParameter"/>s associated with this command.
            </summary>
        </member>
        <member name="P:Glib.SQL.StoredProcedure.Command">
            <summary>
            The underlying stored procedure executed against the database.
            </summary>
            <remarks>
            Cannot be set to a non stored procedure command.
            </remarks>
        </member>
        <member name="E:Glib.SQL.StoredProcedure.CommandCompleted">
            <summary>
            An event called after the completion of the underlying command.
            </summary>
        </member>
        <member name="T:Glib.SQL.CommandWrapper">
            <summary>
            A wrapper class around a SqlCommand, defaulting to a stored procedure.
            </summary>
        </member>
        <member name="F:Glib.SQL.CommandWrapper.Command">
            <summary>
            The stored procedure this class is wrapping.
            </summary>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.Finalize">
            <summary>
            A destructor closing all open SqlDataReaders.
            </summary>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.AddParamater(System.Data.SqlClient.SqlParameter)">
            <summary>
            Add a SqlParamater to the command's arguments.
            </summary>
            <param name="param">The SqlParamater to add.</param>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.AddParamaters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Adds multiple SqlParamaters to the command's arguments.
            </summary>
            <param name="paramaters">The SqlParamaters to add.</param>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.#ctor(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Initialize a new StoredProcedureWrapper with the specified connection and stored procedure.
            </summary>
            <param name="connect">The SqlConnection to connect to the database with.</param>
            <param name="storedProcName">The name of the stored procedure to use.</param>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.ChangeToStandardSqlCommand">
            <summary>
            HIGHLY DISRECOMMENDED UNLESS COMMAND HAS NO USER INPUT, FOR SECURITY'S SAKE.
            Change the command type to a regular SQL statement.
            Vulnerable to SQL injection attacks.
            </summary>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.AppendUntrustedInputToCommand(System.String,System.Boolean,System.Boolean)">
            <summary>
            Append untrusted user input to the existing SQL command text.
            Should not be relied on for security of a SQL command.
            Does not escape text.
            Throws a SecurityException in case of detected suspicious character.
            </summary>
            <exception cref="T:System.Exception">Thrown if a disallowed sharacter sequence is detected.</exception>
            <param name="input">The user input to append to the SQL command.</param>
            <param name="allowQuotes">Whether or not to allow quotes in the user input string.</param>
            <param name="allowOr">Whether or not to allow the world "OR" in the user input string.</param>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.#ctor(System.String,System.String)">
            <summary>
            Initialize a new StoredProcedureWrapper with the specified connection and stored procedure.
            </summary>
            <param name="connectStr">The connection string to use to connect to the database.</param>
            <param name="storedProcName">The name of the stored procedure to use.</param>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.ExecuteReader">
            <summary>
            Execute this command as a SqlDataReader.
            It is important to close this data reader after use.
            Thedestructor's automatic closing of all open SqlDataReaders should not be relied on.
            </summary>
            <returns>A SqlDataReader containing the results of the command.</returns>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.ExecuteDataTable">
            <summary>
            Execute this SqlCommand, and put the results in a DataTable.
            </summary>
            <returns>A DataTable containing the results of the command.</returns>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.Execute">
            <summary>
            Execute this command without returning any output.
            </summary>
        </member>
        <member name="M:Glib.SQL.CommandWrapper.#ctor(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Initialize a new StoredProcedureWrapper with the specified connection, stored procedure, and paramaters.
            </summary>
            <param name="connect">The SqlConnection to connect to the database with.</param>
            <param name="storedProcName">The name of the stored procedure to use.</param>
            <param name="paramaters">The SqlParamaters to add to this SqlCommand.</param>
        </member>
        <member name="P:Glib.SQL.CommandWrapper.Paramaters">
            <summary>
            Get the paramaters passed with this SqlCommand.
            </summary>
        </member>
        <member name="T:Glib.PrimeList`1">
            <summary>
            A list of purely prime numbers.
            </summary>
            <typeparam name="T">A whole number numerical type.</typeparam>
        </member>
        <member name="M:Glib.PrimeList`1.#ctor">
            <summary>
            Create a new prime number list.
            </summary>
        </member>
        <member name="M:Glib.PrimeList`1.#ctor(`0,`0)">
            <summary>
            Make a new list with all prime numbers from startpoint to endpoint.
            </summary>
            <param name="startpoint">The inclusive lower number.</param>
            <param name="endpoint">The exclusive upper number.</param>
        </member>
        <member name="M:Glib.PrimeList`1.IsPrime(System.Object)">
            <summary>
            Returns whether or not the specified number is prime.
            </summary>
            <param name="value">The number to check primeness.</param>
            <exception cref="T:System.ArgumentException">Thrown if value is not a valid number.</exception>
            <returns>Whether or not the specified number is prime</returns>
        </member>
        <member name="M:Glib.PrimeList`1.Add(`0)">
            <summary>
            Add the specified item to the list.
            </summary>
            <param name="value">The item to add.</param>
        </member>
        <member name="M:Glib.PrimeList`1.Insert(System.Int32,`0)">
            <summary>
            Insert an item at a specified index into the list.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:Glib.PrimeList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Insert a range of values to this list beginning at the specified index.
            </summary>
            <param name="index">The index to begin inserting values at.</param>
            <param name="values">The enumerable of values to insert.</param>
        </member>
        <member name="M:Glib.PrimeList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of values to this PrimeList.
            </summary>
            <param name="values">The values to add.</param>
        </member>
        <member name="P:Glib.PrimeList`1.Item(System.Int32)">
            <summary>
            Access the number at the specified index in the array.
            </summary>
            <param name="index">The zero-based index in the list.</param>
            <returns>The number with the specified index in the list.</returns>
        </member>
        <member name="T:Glib.Networking.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.Networking"/> namespace provides various networking utilities.
            </summary>
        </member>
        <member name="T:Glib.Exceptions.SecurityRiskType">
            <summary>
            An enum representing a type of security risk that caused a <see cref="T:Glib.Exceptions.SecurityException"/>.
            </summary>
        </member>
        <member name="F:Glib.Exceptions.SecurityRiskType.XSS">
            <summary>
            Represesnts a detected XSS attempt.
            </summary>
        </member>
        <member name="F:Glib.Exceptions.SecurityRiskType.SQLInject">
            <summary>
            Represents a detected SQL injection attempt.
            </summary>
        </member>
        <member name="T:Glib.Exceptions.SecurityException">
            <summary>
            An exception representing a possible security risk.
            </summary>
        </member>
        <member name="F:Glib.Exceptions.SecurityException.RiskType">
            <summary>
            The type of risk represented by the exception. Null means no specific risk type.
            </summary>
        </member>
        <member name="M:Glib.Exceptions.SecurityException.#ctor">
            <summary>
            Create a new security exception with no specific risk type.
            </summary>
        </member>
        <member name="M:Glib.Exceptions.SecurityException.#ctor(Glib.Exceptions.SecurityRiskType)">
            <summary>
            Create a new security exception with the specified risk type.
            </summary>
            <param name="risk">The type of security risk.</param>
        </member>
        <member name="P:Glib.Exceptions.SecurityException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:Glib.Networking.Email">
            <summary>
            An email message that can be sent.
            </summary>
        </member>
        <member name="F:Glib.Networking.Email.Message">
            <summary>
            The mail message to be sent.
            </summary>
        </member>
        <member name="F:Glib.Networking.Email.Sending">
            <summary>
            The SmtpClient used in sending the message.
            </summary>
        </member>
        <member name="M:Glib.Networking.Email.Send">
            <summary>
            Send the mail message.
            </summary>
        </member>
        <member name="M:Glib.Networking.Email.#ctor(System.Net.Mail.MailAddress,System.Net.Mail.SmtpClient)">
            <summary>
            Create a new email message.
            </summary>
            <param name="from">The email address to send from.</param>
            <param name="send">The client to use to send the message.</param>
        </member>
        <member name="M:Glib.Networking.Email.SendAsync">
            <summary>
            Send the mail message asynchronously.
            </summary>
        </member>
        <member name="E:Glib.Networking.Email.AsyncSendCompleted">
            <summary>
            Occurs when an async send is completed.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.Subject">
            <summary>
            Gets or sets the subject of the email.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.Body">
            <summary>
            Gets or sets the body of the email.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.IsHtml">
            <summary>
            Gets or sets a boolean representing whether or not the message body is HTML.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.Attachments">
            <summary>
            Gets the attachments to be sent along with this mail message.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.Recipients">
            <summary>
            Gets the collection of recipient mail addresses.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.Sender">
            <summary>
            Gets or sets the mail message sender.
            </summary>
        </member>
        <member name="P:Glib.Networking.Email.From">
            <summary>
            Gets or sets the mail message from address.
            </summary>
        </member>
        <member name="T:Glib.Networking.IpPing">
            <summary>
            A class for pinging IPs.
            </summary>
        </member>
        <member name="M:Glib.Networking.IpPing.#ctor">
            <summary>
            Create a new IpPing.
            </summary>
        </member>
        <member name="M:Glib.Networking.IpPing.#ctor(System.Int32)">
            <summary>
            Create a new IpPing with the specified timeout.
            </summary>
            <param name="timeout">The timeout of the ping in milliseconds.</param>
        </member>
        <member name="M:Glib.Networking.IpPing.PingDomain(System.String,System.Int32)">
            <summary>
            Ping the first IP address associated with the specified domain.
            </summary>
            <param name="domainName">The domain to ping.</param>
            <param name="timeout">The timeout.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingDomain(System.String,System.Int32,System.Int32)">
            <summary>
            Ping the specified IP address associated with the specified domain.
            </summary>
            <param name="domainName">The domain to ping.</param>
            <param name="timeout">The timeout.</param>
            <param name="whichDomainIp">The zero-based index of an IPAddress in System.Net.Dns.GetHostAddresses(domainName).</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingDomain(System.String)">
            <summary>
            Ping the first IP address associated with the specified domain.
            </summary>
            <param name="domainName">The domain to ping.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingIP(System.String)">
            <summary>
            Ping the specified IP address.
            </summary>
            <param name="ip">The IP to ping.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingIP(System.Net.IPAddress)">
            <summary>
            Ping the specified IP.
            </summary>
            <param name="ip">The IP address to ping.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingIP(System.String,System.Int32)">
            <summary>
            Ping the specified IP with the specified timeout.
            </summary>
            <param name="ip">The IP address to ping.</param>
            <param name="timeout">The timeout, in milliseconds, of the ping.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="M:Glib.Networking.IpPing.PingIP(System.Net.IPAddress,System.Int32)">
            <summary>
            Ping the specified IP with the specified timeout.
            </summary>
            <param name="ip">The IP address to ping.</param>
            <param name="timeout">The timeout, in milliseconds, of the ping.</param>
            <returns>Whether or not the ping succeeded.</returns>
        </member>
        <member name="P:Glib.Networking.IpPing.TimeOut">
            <summary>
            Get or set the ping timeout in milliseconds.
            </summary>
        </member>
        <member name="T:Glib.AlphabetPrinter">
            <summary>
            A class for printing alphabetical letters to a string and the console.
            </summary>
        </member>
        <member name="M:Glib.AlphabetPrinter.#ctor(System.Char)">
            <summary>
            Create a new AlphabetPrinter creating letters made out of the specified character.
            </summary>
            <param name="printChar">The character to make letters out of.</param>
        </member>
        <member name="M:Glib.AlphabetPrinter.GetAlphabetString(System.String)">
            <summary>
            Get the large alphabet string for the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns>The word as a multiline alphabet string.</returns>
        </member>
        <member name="M:Glib.AlphabetPrinter.Print(System.String)">
            <summary>
            Print the specified word to console.
            </summary>
            <param name="word">The word to print.</param>
        </member>
        <member name="P:Glib.AlphabetPrinter.LetterChar">
            <summary>
            The character to make letters out of.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.A">
            <summary>
            The character A.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.B">
            <summary>
            The character B.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.C">
            <summary>
            The character C.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.D">
            <summary>
            The character D.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.E">
            <summary>
            The character E.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.F">
            <summary>
            The character F.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.G">
            
            <summary>
            The character G.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.H">
            <summary>
            The character H.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.I">
            <summary>
            The character I.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.J">
            <summary>
            The character J.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.K">
            <summary>
            The character K.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.L">
            <summary>
            The character L.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.M">
            <summary>
            The character M.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.N">
            <summary>
            The character N.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.O">
            <summary>
            The character O.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.P">
            <summary>
            The character P.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Q">
            <summary>
            The character Q.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.R">
            <summary>
            The character R.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.S">
            <summary>
            The character S.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.T">
            <summary>
            The character T.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.U">
            <summary>
            The character U.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.V">
            <summary>
            The character V.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Space">
            <summary>
            A space character.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.ExclamationMark">
            <summary>
            An exclamation mark.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Pound">
            <summary>
            The pound sign.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Hyphen">
            <summary>
            A hyphen character.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.LeftParentheses">
            <summary>
            The character representing left parentheses.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.RightParentheses">
            <summary>
            The character representing right parentheses.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.One">
            <summary>
            The number one.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Two">
            <summary>
            The number two.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Three">
            <summary>
            The number three.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.CustomChars">
            <summary>
            Gets a list of custom characters specific to this instance, in the format of key: input letter, value: bool[,] representing the letter.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Four">
            <summary>
            The number four.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Five">
            <summary>
            The number five.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Six">
            <summary>
            The number six.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Seven">
            <summary>
            The number seven.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Eight">
            <summary>
            The number eight.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Nine">
            <summary>
            The number nine.
            </summary>
        </member>
        <member name="P:Glib.AlphabetPrinter.Zero">
            <summary>
            The number zero.
            </summary>
        </member>
        <member name="T:Glib.WinForms.Controls.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.WinForms.Controls"/> namespace provides various Windows Forms controls.
            </summary>
        </member>
        <member name="T:Glib.Services.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.Services"/> namespace provides a base service class.
            </summary>
        </member>
        <member name="T:Glib.Reflection.ReflectionExtensions">
            <summary>
            A class providing various reflection-related extension methods.
            </summary>
        </member>
        <member name="M:Glib.Reflection.ReflectionExtensions.GetPrivatePropertyValue``1(System.Object,System.String)">
            <summary>
            Returns a private property Value from a given Object. Uses Reflection.
            </summary>
            <exception cref="T:System.ArgumentNullException">If obj is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the property is not found.</exception>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Glib.Reflection.ReflectionExtensions.GetPrivateFieldValue``1(System.Object,System.String)">
            <summary>
            Returns a private field Value from a given Object. Uses Reflection.
            Throws an ArgumentOutOfRangeException if the Property is not found.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Glib.Reflection.ReflectionExtensions.SetPrivatePropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Sets a _private_ Property Value from a given Object. Uses Reflection.
            Throws an ArgumentOutOfRangeException if the Property is not found.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is set</param>
            <param name="propName">Propertyname as string.</param>
            <param name="val">Value to set.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Glib.Reflection.ReflectionExtensions.SetPrivateFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Set a private Property Value on a given Object. Uses Reflection.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <param name="val">the value to set</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if the Property is not found</exception>
        </member>
        <member name="M:Glib.Reflection.ReflectionExtensions.CallPrivateMethod(System.Object,System.String,System.Object[])">
            <summary>
            Call a private method on an object through reflection.
            </summary>
            <remarks>
            A public method will not be included in the method search.
            </remarks>
            <param name="objToCallOn">The object to call a method on.</param>
            <param name="methodName">The name of the method.</param>
            <param name="methodParams">The parameters to pass to the method.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="T:Glib.WinForms.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.WinForms"/> namespace provides various Windows Forms utilities.
            </summary>
        </member>
        <member name="T:Glib.WinForms.Controls.RequiredSqlParameterTextBox">
            <summary>
            A required text box representing a SQL parameter.
            </summary>
        </member>
        <member name="T:Glib.WinForms.IRequiredField">
            <summary>
            An interface representing a required winforms field.
            </summary>
        </member>
        <member name="P:Glib.WinForms.IRequiredField.Completed">
            <summary>
            Whether or not the entry is completed properly.
            </summary>
        </member>
        <member name="P:Glib.WinForms.IRequiredField.InvalidityError">
            <summary>
            Gets a string indicating the error to display if the field is invalid.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Controls.RequiredSqlParameterTextBox.#ctor(System.String)">
            <summary>
            Create a new SqlParameterTextBox with the specified parameter name and default validation code.
            </summary>
            <param name="parameterName">The name of the SQL parameter.</param>
        </member>
        <member name="F:Glib.WinForms.Controls.RequiredSqlParameterTextBox.FieldValidation">
            <summary>
            The predicate checking whether or not this field is complete.
            True means complete, false means incomplete.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Controls.RequiredSqlParameterTextBox.#ctor(System.String,System.Predicate{System.String})">
            <summary>
            Create a new SqlParameterTextBox with the specified parameter name and validation code.
            </summary>
            <param name="parameterName">The name of the SQL parameter.</param>
            <param name="validator">The predicate to use to check if the field is complete.</param>
        </member>
        <member name="P:Glib.WinForms.Controls.RequiredSqlParameterTextBox.Completed">
            <summary>
            Whether or not the entry is completed properly.
            Is determined by the return value of FieldValidation.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Controls.RequiredSqlParameterTextBox.InvalidityError">
            <summary>
            Gets or sets a string indicating the error message to display if the field is invalid.
            </summary>
        </member>
        <member name="T:Glib.WinForms.Controls.RequiredTextBox">
            <summary>
            A required text box.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Controls.RequiredTextBox.IsValid(System.String)">
            <summary>
            The default field validation predicate.
            </summary>
            <remarks>
            Checks if the field text is empty, and returns that value inverted.
            </remarks>
            <param name="str">The text of the field.</param>
            <returns>Whether or not the field is valid.</returns>
        </member>
        <member name="M:Glib.WinForms.Controls.RequiredTextBox.#ctor">
            <summary>
            Create a new RequiredTextBox with default validation logic.
            </summary>
        </member>
        <member name="F:Glib.WinForms.Controls.RequiredTextBox.FieldValidation">
            <summary>
            The predicate checking whether or not this field is complete.
            True means complete, false means incomplete.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Controls.RequiredTextBox.#ctor(System.Predicate{System.String})">
            <summary>
            Create a new RequiredTextBox with the specified parameter name and validation predicate.
            </summary>
            <param name="validator">The predicate to use to check if the field is complete.</param>
        </member>
        <member name="P:Glib.WinForms.Controls.RequiredTextBox.Completed">
            <summary>
            Whether or not the entry is completed properly.
            Is determined by the return value of FieldValidation.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Controls.RequiredTextBox.InvalidityError">
            <summary>
            Gets or sets a string indicating the error message to display if the field is invalid.
            </summary>
        </member>
        <member name="T:Glib.Cryptography.CryptoExtensions">
            <summary>
            A class providing cryptographic extensions on strings.
            </summary>
        </member>
        <member name="M:Glib.Cryptography.CryptoExtensions.MD5Hash(System.String)">
            <summary>
            Compute the hexadecimal MD5 hash of the specified string.
            </summary>
            <remarks>
            Uses a MD5CryptoServiceProvider and a BitConverter.
            </remarks>
            <param name="s">The string to hash.</param>
            <returns>The MD5 hash of the input string.</returns>
        </member>
        <member name="M:Glib.Cryptography.CryptoExtensions.SHA256Hash(System.String)">
            <summary>
            Compute the hexadecimal SHA256 hash of the specified string.
            </summary>
            <remarks>
            Uses a SHA256CryptoServiceProvider and a BitConverter.
            </remarks>
            <param name="s">The string to hash.</param>
            <returns>The SHA256 hash of the input string.</returns>
        </member>
        <member name="M:Glib.Cryptography.CryptoExtensions.SHA1Hash(System.String)">
            <summary>
            Compute the hexadecimal SHA1 hash of the specified string.
            </summary>
            <param name="s">The string to hash.</param>
            <returns>The SHA1 hash of the input string.</returns>
        </member>
        <member name="M:Glib.Cryptography.CryptoExtensions.SHA512Hash(System.String)">
            <summary>
            Compute the hexadecimal SHA512 hash of the specified string.
            </summary>
            <remarks>
            Uses a SHA512CryptoServiceProvider and a BitConverter.
            </remarks>
            <param name="s">The string to hash.</param>
            <returns>The hexadecimal SHA512 hash of the specified string.</returns>
        </member>
        <member name="T:Glib.NamespaceDoc">
            <summary>
            The <see cref="N:Glib"/> namespace provides various extension methods and miscellaneous utility class to make your life easier.
            </summary>
            <remarks>
            All XNA components are housed in a separate assembly.
            </remarks>
        </member>
        <member name="T:Glib.WinForms.Shapes.Circle">
            <summary>
            A circle shape.
            </summary>
        </member>
        <member name="M:Glib.WinForms.Shapes.Circle.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Create a new circle with the specified position, diameter, and color.
            </summary>
            <param name="x">The X position of the circle.</param>
            <param name="y">The Y position of the circle.</param>
            <param name="diameter">The diameter of the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Circle.#ctor(System.Drawing.Point,System.Int32,System.Drawing.Color)">
            <summary>
            Create a new circle with the specified position, diameter, and color.
            </summary>
            <param name="pos">The position of the circle.</param>
            <param name="diameter">The diameter of the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Circle.Draw(System.Drawing.Graphics,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw the circle to the specified graphics object..
            </summary>
            <param name="gfx">The graphics device to draw to.</param>
            <param name="color">The color to draw the shape.</param>
            <param name="fill">Whether or not to fill the shape.</param>
        </member>
        <member name="M:Glib.WinForms.Shapes.Circle.Draw(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Draw this circle to the specified graphics object with the default color.
            </summary>
            <param name="gfx">The graphics device to draw to.</param>
            <param name="fill">Whether or not to fill the shape.</param>
        </member>
        <member name="P:Glib.WinForms.Shapes.Circle.Diameter">
            <summary>
            The diameter of the circle.
            </summary>
        </member>
        <member name="P:Glib.WinForms.Shapes.Circle.Radius">
            <summary>
            The radius of the circle.
            </summary>
            <remarks>
            Is approximate in getting since it converts directly to the diameter by integer division.
            </remarks>
        </member>
        <member name="T:Glib.Reflection.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.Reflection"/> namespace provides various extension methods and miscellaneous utility classes to access forbidden members of objects.
            </summary>
        </member>
        <member name="T:Glib.Collections.CollectionExtensions">
            <summary>
            Provides extension methods on collections.
            </summary>
        </member>
        <member name="M:Glib.Collections.CollectionExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Determines whether the specified enumerable contains any of the specified elements.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="enumerable">The enumerable to check containment in.</param>
            <param name="elements">The elements to check containment of.</param>
            <returns>Whether any of the elements are present in the enumerable.</returns>
        </member>
        <member name="M:Glib.Collections.CollectionExtensions.ContentsEqual``1(``0[],``0[])">
            <summary>
            Determines whether the specified arrays' contents are equal.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="enumerable">The left-hand side array.</param>
            <param name="elements">The right-hand side array.</param>
            <returns>Whether the contents of the arrays are equal.</returns>
        </member>
        <member name="M:Glib.Collections.CollectionExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Determines whether the specified enumerable contains all of the specified elements.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="enumerable">The enumerable to check containment in.</param>
            <param name="elements">The elements to check containment of.</param>
            <returns>Whether all of the elements are present in the enumerable.</returns>
        </member>
        <member name="T:Glib.UniqueRandom">
            <summary>
            A random number generator generating only unique random numbers.
            </summary>
        </member>
        <member name="M:Glib.UniqueRandom.#ctor">
            <summary>
            Create a new UniqueRandom random number generator.
            </summary>
        </member>
        <member name="M:Glib.UniqueRandom.#ctor(System.Int32)">
            <summary>
            Create a new UniqueRandom random number generator with the specified seed.
            </summary>
            <param name="seed">The seed of the random number generator.</param>
        </member>
        <member name="M:Glib.UniqueRandom.Reset">
            <summary>
            Reset the list of generated numbers (integers, doubles, and bytes).
            </summary>
        </member>
        <member name="M:Glib.UniqueRandom.ResetInts">
            
            
            <summary>
            Reset the list of generated integers.
            </summary>
        </member>
        <member name="M:Glib.UniqueRandom.ResetDoubles">
            <summary>
            Reset the list of generated doubles.
            </summary>
        </member>
        <member name="M:Glib.UniqueRandom.Next(System.Int32,System.Int32)">
            <summary>
            Generate a random unique number between the two specified values.
            </summary>
            <param name="minValue">The inclusive lower bound of the number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the number to be generated.</param>
            <returns>A random number, unique within this instance, between the two specified values.</returns>
        </member>
        <member name="M:Glib.UniqueRandom.Next(System.Int32)">
            <summary>
            Generate a random unique number lower than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the number to be generated.</param>
            <returns>A random number, unique within this instance, less than the specified value.</returns>
        </member>
        <member name="M:Glib.UniqueRandom.Next">
            <summary>
            Generate a random, unique number.
            </summary>
            <returns>A random, unique number to this instance.</returns>
        </member>
        <member name="M:Glib.UniqueRandom.NextDouble">
            <summary>
            Generate a random, unique double between 0.0 and 1.0.
            </summary>
            <returns>A random, unique double to this instance.</returns>
        </member>
        <member name="M:Glib.UniqueRandom.NextBytes(System.Byte[])">
            <summary>
            Fill the elements of a specified array with bytes of non-unique random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="T:Glib.ObjectExtensions">
            <summary>
            Multiple type-to-type conversion methods acting as extensions on object.
            </summary>
        </member>
        <member name="M:Glib.ObjectExtensions.ToInt(System.Object)">
            <summary>
            Convert the specified object to an integer.
            </summary>
            <param name="o">The object to convert to an integer.</param>
            <returns>The integer representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToArrayString(System.Array,System.String)">
            <summary>
            Convert an array to a string.
            </summary>
            <param name="array">The array to convert.</param>
            <param name="delimiter">The delimiter between elements.</param>
            <returns>All elements of the array delimited by delimiter in a string.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Format(System.String,System.Object[])">
            <summary>
            Format the specified string, using String.Format(String, Object[]).
            </summary>
            <param name="s">String.Format(String, Object[])'s first argument.</param>
            <param name="formatElements">The array of objects to go into String.Format(String, Object[])'s 2nd argument.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Format(System.String,System.String@,System.Object[])">
            <summary>
            Format the specified string, using String.Format(String, Object[]), and sending the results to output.
            </summary>
            <param name="s">String.Format(String, Object[])'s first argument.</param>
            <param name="output">The string to output the results to.</param>
            <param name="formatElements">The array of objects to go into String.Format(String, Object[])'s 2nd argument.</param>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Double,System.Double)">
            <summary>
            Raise the specified number to a power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise a number to.</param>
            <returns>The number risen to a power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Single,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Int16,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Int32,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Decimal,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.RaiseToPower(System.Int64,System.Double)">
            <summary>
            Raise the specified number to the specified power.
            </summary>
            <param name="d">The number to raise to a power.</param>
            <param name="power">The power to raise the number to.</param>
            <returns>The number risen to the specified power.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToDecimal(System.Object)">
            <summary>
            Convert the specified object into a decimal.
            </summary>
            <param name="o">The object to convert to a decimal.</param>
            <returns>The object represented as a decimal.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToShort(System.Object)">
            <summary>
            Convert the specified object to a short.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The short representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToLong(System.Object)">
            <summary>
            Convert the specified object to a long.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The long representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToFloat(System.Object)">
            <summary>
            Convert the specified object to a single-precision floating point number.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The object represented as a float.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToDouble(System.Object)">
            <summary>
            Convert the specified object to a double-precision floating point number.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The object represented as a double.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToBoolean(System.Object)">
            <summary>
            Convert the specified object to a boolean.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The boolean representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToUnsignedShort(System.Object)">
            <summary>
            Convert the specified object to an unsigned short.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The ushort representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToUnsignedInt(System.Object)">
            <summary>
            Convert the specified object to a uint.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>This object represented as a UInt32.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.ToUnsignedLong(System.Object)">
            <summary>
            Convert this object to an unsigned long.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>The unsigned long representation of the specified object.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Round(System.Single)">
            <summary>
            Round a float to the nearest whole number.
            </summary>
            <param name="f">The floating-point number to round</param>
            <returns>The number rounded to the nearest integer</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Round(System.Double)">
            <summary>
            Round a double to the nearest whole number.
            </summary>
            <param name="d">The floating-point number to round</param>
            <returns>The number rounded to the nearest integer</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Round(System.Decimal)">
            <summary>
            Round a decimal to the nearest whole number.
            </summary>
            <param name="d">The decimal number to round</param>
            <returns>The number rounded to the nearest integer</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Implements(System.Type,System.Type)">
            <summary>
            Check if a type implements a given interface.
            </summary>
            <param name="cT">The type to check implementation of an interface on</param>
            <param name="t">The interface to check</param>
            <returns>Whether or not the object implements the given interface</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Cast``1(System.Object)">
            <summary>
            Cast this object to the specified type.
            </summary>
            <typeparam name="T">The type to cast the object to.</typeparam>
            <param name="o">The object to cast.</param>
            <returns>The object casted to T.</returns>
        </member>
        <member name="M:Glib.ObjectExtensions.Cast``1(System.Object,``0@)">
            <summary>
            Cast this object to the specified type, and output the casted object to a variable.
            </summary>
            <typeparam name="T">The type to cast the object to.</typeparam>
            <param name="o">The object to cast.</param>
            <param name="castedObj">The object casted to T.</param>
        </member>
        <member name="T:Glib.Cryptography.NamespaceDoc">
            <summary>
            The <see cref="N:Glib.Cryptography"/> namespace provides various cryptocraphic extension methods and utilities.
            </summary>
        </member>
    </members>
</doc>
